<?php
/**
 * SEPAPayment
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * easybill REST API
 *
 * The first version of the easybill REST API. [CHANGELOG](https://api.easybill.de/rest/v1/CHANGELOG.md)  ## Authentication  You can choose between two available methods: `Basic Auth` or `Bearer Token`.  In each HTTP request, one of the following HTTP headers is required:  ``` # Basic Auth Authorization: Basic base64_encode('<email>:<api_key>') # Bearer Token Authorization: Bearer <api_key> ```  ## Limitations  ### Request Limit  * PLUS: 10 requests per minute * BUSINESS: 60 requests per minute  If the limit is exceeded, you will receive the HTTP error: `429 Too Many Requests`  ### Result Limit  All result lists are limited to 100 by default. This limit can be increased by the query parameter `limit` to a maximum of 1000.  ## Query filter  Many list resources can be filtered. In `/documents` you can filter e.g. by number with `/documents?number=111028654`. If you want to filter multiple numbers, you can either enter them separated by commas `/documents?number=111028654,222006895` or as an array `/documents?number[]=111028654&number[]=222006895`.  **Warning**: The maximum size of an HTTP request line in bytes is 4094. If this limit is exceeded, you will receive the HTTP error: `414 Request-URI Too Large`  ### Escape commas in query  You can escape commans in query `name=Patrick\\, Peter` if you submit the header `X-Easybill-Escape: true` in your request.  ## Property login_id  This is the login of your admin or employee account.  ## Date and Date-Time format Please use the timezone `Europe/Berlin`. * **date** = *Y-m-d* = `2016-12-31` * **date-time** = *Y-m-d H:i:s* = `2016-12-31 03:13:37`  Date or datetime can be `null` because the attributes have been added later and the entry is older.
 *
 * OpenAPI spec version: 1.70.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.33
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SEPAPayment Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SEPAPayment implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SEPAPayment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'amount' => 'int',
'created_at' => '\DateTime',
'creditor_bic' => 'string',
'creditor_iban' => 'string',
'creditor_name' => 'string',
'debitor_bic' => 'string',
'debitor_iban' => 'string',
'debitor_name' => 'string',
'debitor_address_line_1' => 'string',
'debitor_address_line2' => 'string',
'debitor_country' => 'string',
'document_id' => 'int',
'export_at' => '\DateTime',
'export_error' => 'string',
'id' => 'int',
'local_instrument' => 'string',
'mandate_date_of_signature' => '\DateTime',
'mandate_id' => 'string',
'reference' => 'string',
'remittance_information' => 'string',
'requested_at' => '\DateTime',
'sequence_type' => 'string',
'updated_at' => 'string',
'type' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'amount' => null,
'created_at' => 'date-time',
'creditor_bic' => null,
'creditor_iban' => null,
'creditor_name' => null,
'debitor_bic' => null,
'debitor_iban' => null,
'debitor_name' => null,
'debitor_address_line_1' => null,
'debitor_address_line2' => null,
'debitor_country' => null,
'document_id' => 'int64',
'export_at' => 'date-time',
'export_error' => null,
'id' => 'int64',
'local_instrument' => null,
'mandate_date_of_signature' => 'date',
'mandate_id' => null,
'reference' => null,
'remittance_information' => null,
'requested_at' => 'date',
'sequence_type' => null,
'updated_at' => 'datetime',
'type' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount' => 'amount',
'created_at' => 'created_at',
'creditor_bic' => 'creditor_bic',
'creditor_iban' => 'creditor_iban',
'creditor_name' => 'creditor_name',
'debitor_bic' => 'debitor_bic',
'debitor_iban' => 'debitor_iban',
'debitor_name' => 'debitor_name',
'debitor_address_line_1' => 'debitor_address_line_1',
'debitor_address_line2' => 'debitor_address_line2',
'debitor_country' => 'debitor_country',
'document_id' => 'document_id',
'export_at' => 'export_at',
'export_error' => 'export_error',
'id' => 'id',
'local_instrument' => 'local_instrument',
'mandate_date_of_signature' => 'mandate_date_of_signature',
'mandate_id' => 'mandate_id',
'reference' => 'reference',
'remittance_information' => 'remittance_information',
'requested_at' => 'requested_at',
'sequence_type' => 'sequence_type',
'updated_at' => 'updated_at',
'type' => 'type'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount' => 'setAmount',
'created_at' => 'setCreatedAt',
'creditor_bic' => 'setCreditorBic',
'creditor_iban' => 'setCreditorIban',
'creditor_name' => 'setCreditorName',
'debitor_bic' => 'setDebitorBic',
'debitor_iban' => 'setDebitorIban',
'debitor_name' => 'setDebitorName',
'debitor_address_line_1' => 'setDebitorAddressLine1',
'debitor_address_line2' => 'setDebitorAddressLine2',
'debitor_country' => 'setDebitorCountry',
'document_id' => 'setDocumentId',
'export_at' => 'setExportAt',
'export_error' => 'setExportError',
'id' => 'setId',
'local_instrument' => 'setLocalInstrument',
'mandate_date_of_signature' => 'setMandateDateOfSignature',
'mandate_id' => 'setMandateId',
'reference' => 'setReference',
'remittance_information' => 'setRemittanceInformation',
'requested_at' => 'setRequestedAt',
'sequence_type' => 'setSequenceType',
'updated_at' => 'setUpdatedAt',
'type' => 'setType'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount' => 'getAmount',
'created_at' => 'getCreatedAt',
'creditor_bic' => 'getCreditorBic',
'creditor_iban' => 'getCreditorIban',
'creditor_name' => 'getCreditorName',
'debitor_bic' => 'getDebitorBic',
'debitor_iban' => 'getDebitorIban',
'debitor_name' => 'getDebitorName',
'debitor_address_line_1' => 'getDebitorAddressLine1',
'debitor_address_line2' => 'getDebitorAddressLine2',
'debitor_country' => 'getDebitorCountry',
'document_id' => 'getDocumentId',
'export_at' => 'getExportAt',
'export_error' => 'getExportError',
'id' => 'getId',
'local_instrument' => 'getLocalInstrument',
'mandate_date_of_signature' => 'getMandateDateOfSignature',
'mandate_id' => 'getMandateId',
'reference' => 'getReference',
'remittance_information' => 'getRemittanceInformation',
'requested_at' => 'getRequestedAt',
'sequence_type' => 'getSequenceType',
'updated_at' => 'getUpdatedAt',
'type' => 'getType'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const LOCAL_INSTRUMENT_CORE = 'CORE';
const LOCAL_INSTRUMENT_COR1 = 'COR1';
const LOCAL_INSTRUMENT_B2_B = 'B2B';
const SEQUENCE_TYPE_FRST = 'FRST';
const SEQUENCE_TYPE_OOFF = 'OOFF';
const SEQUENCE_TYPE_FNAL = 'FNAL';
const SEQUENCE_TYPE_RCUR = 'RCUR';
const TYPE_DEBIT = 'DEBIT';
const TYPE_CREDIT = 'CREDIT';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLocalInstrumentAllowableValues()
    {
        return [
            self::LOCAL_INSTRUMENT_CORE,
self::LOCAL_INSTRUMENT_COR1,
self::LOCAL_INSTRUMENT_B2_B,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSequenceTypeAllowableValues()
    {
        return [
            self::SEQUENCE_TYPE_FRST,
self::SEQUENCE_TYPE_OOFF,
self::SEQUENCE_TYPE_FNAL,
self::SEQUENCE_TYPE_RCUR,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_DEBIT,
self::TYPE_CREDIT,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['creditor_bic'] = isset($data['creditor_bic']) ? $data['creditor_bic'] : 'null';
        $this->container['creditor_iban'] = isset($data['creditor_iban']) ? $data['creditor_iban'] : null;
        $this->container['creditor_name'] = isset($data['creditor_name']) ? $data['creditor_name'] : null;
        $this->container['debitor_bic'] = isset($data['debitor_bic']) ? $data['debitor_bic'] : 'null';
        $this->container['debitor_iban'] = isset($data['debitor_iban']) ? $data['debitor_iban'] : null;
        $this->container['debitor_name'] = isset($data['debitor_name']) ? $data['debitor_name'] : null;
        $this->container['debitor_address_line_1'] = isset($data['debitor_address_line_1']) ? $data['debitor_address_line_1'] : null;
        $this->container['debitor_address_line2'] = isset($data['debitor_address_line2']) ? $data['debitor_address_line2'] : null;
        $this->container['debitor_country'] = isset($data['debitor_country']) ? $data['debitor_country'] : null;
        $this->container['document_id'] = isset($data['document_id']) ? $data['document_id'] : null;
        $this->container['export_at'] = isset($data['export_at']) ? $data['export_at'] : null;
        $this->container['export_error'] = isset($data['export_error']) ? $data['export_error'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['local_instrument'] = isset($data['local_instrument']) ? $data['local_instrument'] : null;
        $this->container['mandate_date_of_signature'] = isset($data['mandate_date_of_signature']) ? $data['mandate_date_of_signature'] : null;
        $this->container['mandate_id'] = isset($data['mandate_id']) ? $data['mandate_id'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['remittance_information'] = isset($data['remittance_information']) ? $data['remittance_information'] : 'null';
        $this->container['requested_at'] = isset($data['requested_at']) ? $data['requested_at'] : null;
        $this->container['sequence_type'] = isset($data['sequence_type']) ? $data['sequence_type'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : 'DEBIT';
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['debitor_iban'] === null) {
            $invalidProperties[] = "'debitor_iban' can't be null";
        }
        if ($this->container['debitor_name'] === null) {
            $invalidProperties[] = "'debitor_name' can't be null";
        }
        if ($this->container['document_id'] === null) {
            $invalidProperties[] = "'document_id' can't be null";
        }
        if ($this->container['local_instrument'] === null) {
            $invalidProperties[] = "'local_instrument' can't be null";
        }
        $allowedValues = $this->getLocalInstrumentAllowableValues();
        if (!is_null($this->container['local_instrument']) && !in_array($this->container['local_instrument'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'local_instrument', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['mandate_date_of_signature'] === null) {
            $invalidProperties[] = "'mandate_date_of_signature' can't be null";
        }
        if ($this->container['mandate_id'] === null) {
            $invalidProperties[] = "'mandate_id' can't be null";
        }
        if ($this->container['reference'] === null) {
            $invalidProperties[] = "'reference' can't be null";
        }
        if ($this->container['sequence_type'] === null) {
            $invalidProperties[] = "'sequence_type' can't be null";
        }
        $allowedValues = $this->getSequenceTypeAllowableValues();
        if (!is_null($this->container['sequence_type']) && !in_array($this->container['sequence_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'sequence_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount Amount in cents (e.g. \"150\" = 1.50€)
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets creditor_bic
     *
     * @return string
     */
    public function getCreditorBic()
    {
        return $this->container['creditor_bic'];
    }

    /**
     * Sets creditor_bic
     *
     * @param string $creditor_bic If type is DEBIT, this field is overwritten with the selected bank account data on export.
     *
     * @return $this
     */
    public function setCreditorBic($creditor_bic)
    {
        $this->container['creditor_bic'] = $creditor_bic;

        return $this;
    }

    /**
     * Gets creditor_iban
     *
     * @return string
     */
    public function getCreditorIban()
    {
        return $this->container['creditor_iban'];
    }

    /**
     * Sets creditor_iban
     *
     * @param string $creditor_iban Mandatory if type is CREDIT. If type is DEBIT, this field is overwritten with the selected bank account data on export.
     *
     * @return $this
     */
    public function setCreditorIban($creditor_iban)
    {
        $this->container['creditor_iban'] = $creditor_iban;

        return $this;
    }

    /**
     * Gets creditor_name
     *
     * @return string
     */
    public function getCreditorName()
    {
        return $this->container['creditor_name'];
    }

    /**
     * Sets creditor_name
     *
     * @param string $creditor_name Mandatory if type is CREDIT. If type is DEBIT, this field is overwritten with the selected bank account data on export.
     *
     * @return $this
     */
    public function setCreditorName($creditor_name)
    {
        $this->container['creditor_name'] = $creditor_name;

        return $this;
    }

    /**
     * Gets debitor_bic
     *
     * @return string
     */
    public function getDebitorBic()
    {
        return $this->container['debitor_bic'];
    }

    /**
     * Sets debitor_bic
     *
     * @param string $debitor_bic If type is CREDIT, this field is overwritten with the selected bank account data on export.
     *
     * @return $this
     */
    public function setDebitorBic($debitor_bic)
    {
        $this->container['debitor_bic'] = $debitor_bic;

        return $this;
    }

    /**
     * Gets debitor_iban
     *
     * @return string
     */
    public function getDebitorIban()
    {
        return $this->container['debitor_iban'];
    }

    /**
     * Sets debitor_iban
     *
     * @param string $debitor_iban Mandatory if type is DEBIT. If type is CREDIT, this field is overwritten with the selected bank account data on export.
     *
     * @return $this
     */
    public function setDebitorIban($debitor_iban)
    {
        $this->container['debitor_iban'] = $debitor_iban;

        return $this;
    }

    /**
     * Gets debitor_name
     *
     * @return string
     */
    public function getDebitorName()
    {
        return $this->container['debitor_name'];
    }

    /**
     * Sets debitor_name
     *
     * @param string $debitor_name Mandatory if type is DEBIT. If type is CREDIT, this field is overwritten with the selected bank account data on export.
     *
     * @return $this
     */
    public function setDebitorName($debitor_name)
    {
        $this->container['debitor_name'] = $debitor_name;

        return $this;
    }

    /**
     * Gets debitor_address_line_1
     *
     * @return string
     */
    public function getDebitorAddressLine1()
    {
        return $this->container['debitor_address_line_1'];
    }

    /**
     * Sets debitor_address_line_1
     *
     * @param string $debitor_address_line_1 Mandatory if type is DEBIT and the debitor's IBAN belongs to a country outside the EEA
     *
     * @return $this
     */
    public function setDebitorAddressLine1($debitor_address_line_1)
    {
        $this->container['debitor_address_line_1'] = $debitor_address_line_1;

        return $this;
    }

    /**
     * Gets debitor_address_line2
     *
     * @return string
     */
    public function getDebitorAddressLine2()
    {
        return $this->container['debitor_address_line2'];
    }

    /**
     * Sets debitor_address_line2
     *
     * @param string $debitor_address_line2 string
     *
     * @return $this
     */
    public function setDebitorAddressLine2($debitor_address_line2)
    {
        $this->container['debitor_address_line2'] = $debitor_address_line2;

        return $this;
    }

    /**
     * Gets debitor_country
     *
     * @return string
     */
    public function getDebitorCountry()
    {
        return $this->container['debitor_country'];
    }

    /**
     * Sets debitor_country
     *
     * @param string $debitor_country Mandatory if type is DEBIT and the debitor's IBAN belongs to a country outside the EEA
     *
     * @return $this
     */
    public function setDebitorCountry($debitor_country)
    {
        $this->container['debitor_country'] = $debitor_country;

        return $this;
    }

    /**
     * Gets document_id
     *
     * @return int
     */
    public function getDocumentId()
    {
        return $this->container['document_id'];
    }

    /**
     * Sets document_id
     *
     * @param int $document_id document_id
     *
     * @return $this
     */
    public function setDocumentId($document_id)
    {
        $this->container['document_id'] = $document_id;

        return $this;
    }

    /**
     * Gets export_at
     *
     * @return \DateTime
     */
    public function getExportAt()
    {
        return $this->container['export_at'];
    }

    /**
     * Sets export_at
     *
     * @param \DateTime $export_at If a date is set, this record is marked as exported
     *
     * @return $this
     */
    public function setExportAt($export_at)
    {
        $this->container['export_at'] = $export_at;

        return $this;
    }

    /**
     * Gets export_error
     *
     * @return string
     */
    public function getExportError()
    {
        return $this->container['export_error'];
    }

    /**
     * Sets export_error
     *
     * @param string $export_error export_error
     *
     * @return $this
     */
    public function setExportError($export_error)
    {
        $this->container['export_error'] = $export_error;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets local_instrument
     *
     * @return string
     */
    public function getLocalInstrument()
    {
        return $this->container['local_instrument'];
    }

    /**
     * Sets local_instrument
     *
     * @param string $local_instrument CORE: SEPA Core Direct Debit<br/> COR1: SEPA-Basislastschrift COR1<br/> B2B: SEPA Business to Business Direct Debit
     *
     * @return $this
     */
    public function setLocalInstrument($local_instrument)
    {
        $allowedValues = $this->getLocalInstrumentAllowableValues();
        if (!in_array($local_instrument, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'local_instrument', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['local_instrument'] = $local_instrument;

        return $this;
    }

    /**
     * Gets mandate_date_of_signature
     *
     * @return \DateTime
     */
    public function getMandateDateOfSignature()
    {
        return $this->container['mandate_date_of_signature'];
    }

    /**
     * Sets mandate_date_of_signature
     *
     * @param \DateTime $mandate_date_of_signature mandate_date_of_signature
     *
     * @return $this
     */
    public function setMandateDateOfSignature($mandate_date_of_signature)
    {
        $this->container['mandate_date_of_signature'] = $mandate_date_of_signature;

        return $this;
    }

    /**
     * Gets mandate_id
     *
     * @return string
     */
    public function getMandateId()
    {
        return $this->container['mandate_id'];
    }

    /**
     * Sets mandate_id
     *
     * @param string $mandate_id mandate_id
     *
     * @return $this
     */
    public function setMandateId($mandate_id)
    {
        $this->container['mandate_id'] = $mandate_id;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference reference
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets remittance_information
     *
     * @return string
     */
    public function getRemittanceInformation()
    {
        return $this->container['remittance_information'];
    }

    /**
     * Sets remittance_information
     *
     * @param string $remittance_information remittance_information
     *
     * @return $this
     */
    public function setRemittanceInformation($remittance_information)
    {
        $this->container['remittance_information'] = $remittance_information;

        return $this;
    }

    /**
     * Gets requested_at
     *
     * @return \DateTime
     */
    public function getRequestedAt()
    {
        return $this->container['requested_at'];
    }

    /**
     * Sets requested_at
     *
     * @param \DateTime $requested_at Booking date
     *
     * @return $this
     */
    public function setRequestedAt($requested_at)
    {
        $this->container['requested_at'] = $requested_at;

        return $this;
    }

    /**
     * Gets sequence_type
     *
     * @return string
     */
    public function getSequenceType()
    {
        return $this->container['sequence_type'];
    }

    /**
     * Sets sequence_type
     *
     * @param string $sequence_type FRST: Erstlastschrift<br/> RCUR: Folgelastschrift<br/> OOFF: Einmallastschrift<br/> FNAL: Letztmalige Lastschrift
     *
     * @return $this
     */
    public function setSequenceType($sequence_type)
    {
        $allowedValues = $this->getSequenceTypeAllowableValues();
        if (!in_array($sequence_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'sequence_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sequence_type'] = $sequence_type;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
