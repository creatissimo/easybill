<?php
/**
 * Position
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * easybill REST API
 *
 * The first version of the easybill REST API. [CHANGELOG](https://api.easybill.de/rest/v1/CHANGELOG.md)  ## Authentication  You can choose between two available methods: `Basic Auth` or `Bearer Token`.  In each HTTP request, one of the following HTTP headers is required:  ``` # Basic Auth Authorization: Basic base64_encode('<email>:<api_key>') # Bearer Token Authorization: Bearer <api_key> ```  ## Limitations  ### Request Limit  * PLUS: 10 requests per minute * BUSINESS: 60 requests per minute  If the limit is exceeded, you will receive the HTTP error: `429 Too Many Requests`  ### Result Limit  All result lists are limited to 100 by default. This limit can be increased by the query parameter `limit` to a maximum of 1000.  ## Query filter  Many list resources can be filtered. In `/documents` you can filter e.g. by number with `/documents?number=111028654`. If you want to filter multiple numbers, you can either enter them separated by commas `/documents?number=111028654,222006895` or as an array `/documents?number[]=111028654&number[]=222006895`.  **Warning**: The maximum size of an HTTP request line in bytes is 4094. If this limit is exceeded, you will receive the HTTP error: `414 Request-URI Too Large`  ### Escape commas in query  You can escape commans in query `name=Patrick\\, Peter` if you submit the header `X-Easybill-Escape: true` in your request.  ## Property login_id  This is the login of your admin or employee account.  ## Date and Date-Time format Please use the timezone `Europe/Berlin`. * **date** = *Y-m-d* = `2016-12-31` * **date-time** = *Y-m-d H:i:s* = `2016-12-31 03:13:37`  Date or datetime can be `null` because the attributes have been added later and the entry is older.
 *
 * OpenAPI spec version: 1.70.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.33
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Position Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Position implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Position';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'type' => 'string',
'number' => 'string',
'description' => 'string',
'document_note' => 'string',
'note' => 'string',
'unit' => 'string',
'export_identifier' => 'string',
'export_identifier_extended' => '\Swagger\Client\Model\PositionExportIdentifierExtended',
'login_id' => 'int',
'price_type' => 'string',
'vat_percent' => 'float',
'sale_price' => 'float',
'sale_price2' => 'float',
'sale_price3' => 'float',
'sale_price4' => 'float',
'sale_price5' => 'float',
'sale_price6' => 'float',
'sale_price7' => 'float',
'sale_price8' => 'float',
'sale_price9' => 'float',
'sale_price10' => 'float',
'cost_price' => 'float',
'export_cost1' => 'string',
'export_cost2' => 'string',
'group_id' => 'int',
'stock' => 'string',
'stock_count' => 'int',
'stock_limit_notify' => 'bool',
'stock_limit_notify_frequency' => 'string',
'stock_limit' => 'int',
'quantity' => 'float'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
'type' => null,
'number' => null,
'description' => null,
'document_note' => null,
'note' => null,
'unit' => null,
'export_identifier' => null,
'export_identifier_extended' => null,
'login_id' => 'int64',
'price_type' => null,
'vat_percent' => 'float',
'sale_price' => 'float',
'sale_price2' => 'float',
'sale_price3' => 'float',
'sale_price4' => 'float',
'sale_price5' => 'float',
'sale_price6' => 'float',
'sale_price7' => 'float',
'sale_price8' => 'float',
'sale_price9' => 'float',
'sale_price10' => 'float',
'cost_price' => 'float',
'export_cost1' => null,
'export_cost2' => null,
'group_id' => 'int64',
'stock' => null,
'stock_count' => null,
'stock_limit_notify' => null,
'stock_limit_notify_frequency' => null,
'stock_limit' => null,
'quantity' => 'float'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'type' => 'type',
'number' => 'number',
'description' => 'description',
'document_note' => 'document_note',
'note' => 'note',
'unit' => 'unit',
'export_identifier' => 'export_identifier',
'export_identifier_extended' => 'export_identifier_extended',
'login_id' => 'login_id',
'price_type' => 'price_type',
'vat_percent' => 'vat_percent',
'sale_price' => 'sale_price',
'sale_price2' => 'sale_price2',
'sale_price3' => 'sale_price3',
'sale_price4' => 'sale_price4',
'sale_price5' => 'sale_price5',
'sale_price6' => 'sale_price6',
'sale_price7' => 'sale_price7',
'sale_price8' => 'sale_price8',
'sale_price9' => 'sale_price9',
'sale_price10' => 'sale_price10',
'cost_price' => 'cost_price',
'export_cost1' => 'export_cost1',
'export_cost2' => 'export_cost2',
'group_id' => 'group_id',
'stock' => 'stock',
'stock_count' => 'stock_count',
'stock_limit_notify' => 'stock_limit_notify',
'stock_limit_notify_frequency' => 'stock_limit_notify_frequency',
'stock_limit' => 'stock_limit',
'quantity' => 'quantity'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'type' => 'setType',
'number' => 'setNumber',
'description' => 'setDescription',
'document_note' => 'setDocumentNote',
'note' => 'setNote',
'unit' => 'setUnit',
'export_identifier' => 'setExportIdentifier',
'export_identifier_extended' => 'setExportIdentifierExtended',
'login_id' => 'setLoginId',
'price_type' => 'setPriceType',
'vat_percent' => 'setVatPercent',
'sale_price' => 'setSalePrice',
'sale_price2' => 'setSalePrice2',
'sale_price3' => 'setSalePrice3',
'sale_price4' => 'setSalePrice4',
'sale_price5' => 'setSalePrice5',
'sale_price6' => 'setSalePrice6',
'sale_price7' => 'setSalePrice7',
'sale_price8' => 'setSalePrice8',
'sale_price9' => 'setSalePrice9',
'sale_price10' => 'setSalePrice10',
'cost_price' => 'setCostPrice',
'export_cost1' => 'setExportCost1',
'export_cost2' => 'setExportCost2',
'group_id' => 'setGroupId',
'stock' => 'setStock',
'stock_count' => 'setStockCount',
'stock_limit_notify' => 'setStockLimitNotify',
'stock_limit_notify_frequency' => 'setStockLimitNotifyFrequency',
'stock_limit' => 'setStockLimit',
'quantity' => 'setQuantity'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'type' => 'getType',
'number' => 'getNumber',
'description' => 'getDescription',
'document_note' => 'getDocumentNote',
'note' => 'getNote',
'unit' => 'getUnit',
'export_identifier' => 'getExportIdentifier',
'export_identifier_extended' => 'getExportIdentifierExtended',
'login_id' => 'getLoginId',
'price_type' => 'getPriceType',
'vat_percent' => 'getVatPercent',
'sale_price' => 'getSalePrice',
'sale_price2' => 'getSalePrice2',
'sale_price3' => 'getSalePrice3',
'sale_price4' => 'getSalePrice4',
'sale_price5' => 'getSalePrice5',
'sale_price6' => 'getSalePrice6',
'sale_price7' => 'getSalePrice7',
'sale_price8' => 'getSalePrice8',
'sale_price9' => 'getSalePrice9',
'sale_price10' => 'getSalePrice10',
'cost_price' => 'getCostPrice',
'export_cost1' => 'getExportCost1',
'export_cost2' => 'getExportCost2',
'group_id' => 'getGroupId',
'stock' => 'getStock',
'stock_count' => 'getStockCount',
'stock_limit_notify' => 'getStockLimitNotify',
'stock_limit_notify_frequency' => 'getStockLimitNotifyFrequency',
'stock_limit' => 'getStockLimit',
'quantity' => 'getQuantity'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_PRODUCT = 'PRODUCT';
const TYPE_SERVICE = 'SERVICE';
const TYPE_TEXT = 'TEXT';
const PRICE_TYPE_BRUTTO = 'BRUTTO';
const PRICE_TYPE_NETTO = 'NETTO';
const STOCK_YES = 'YES';
const STOCK_NO = 'NO';
const STOCK_LIMIT_NOTIFY_FREQUENCY_ALWAYS = 'ALWAYS';
const STOCK_LIMIT_NOTIFY_FREQUENCY_ONCE = 'ONCE';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_PRODUCT,
self::TYPE_SERVICE,
self::TYPE_TEXT,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPriceTypeAllowableValues()
    {
        return [
            self::PRICE_TYPE_BRUTTO,
self::PRICE_TYPE_NETTO,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStockAllowableValues()
    {
        return [
            self::STOCK_YES,
self::STOCK_NO,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStockLimitNotifyFrequencyAllowableValues()
    {
        return [
            self::STOCK_LIMIT_NOTIFY_FREQUENCY_ALWAYS,
self::STOCK_LIMIT_NOTIFY_FREQUENCY_ONCE,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : 'PRODUCT';
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['document_note'] = isset($data['document_note']) ? $data['document_note'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : 'null';
        $this->container['unit'] = isset($data['unit']) ? $data['unit'] : 'null';
        $this->container['export_identifier'] = isset($data['export_identifier']) ? $data['export_identifier'] : 'null';
        $this->container['export_identifier_extended'] = isset($data['export_identifier_extended']) ? $data['export_identifier_extended'] : null;
        $this->container['login_id'] = isset($data['login_id']) ? $data['login_id'] : null;
        $this->container['price_type'] = isset($data['price_type']) ? $data['price_type'] : 'NETTO';
        $this->container['vat_percent'] = isset($data['vat_percent']) ? $data['vat_percent'] : 19.0;
        $this->container['sale_price'] = isset($data['sale_price']) ? $data['sale_price'] : null;
        $this->container['sale_price2'] = isset($data['sale_price2']) ? $data['sale_price2'] : null;
        $this->container['sale_price3'] = isset($data['sale_price3']) ? $data['sale_price3'] : null;
        $this->container['sale_price4'] = isset($data['sale_price4']) ? $data['sale_price4'] : null;
        $this->container['sale_price5'] = isset($data['sale_price5']) ? $data['sale_price5'] : null;
        $this->container['sale_price6'] = isset($data['sale_price6']) ? $data['sale_price6'] : null;
        $this->container['sale_price7'] = isset($data['sale_price7']) ? $data['sale_price7'] : null;
        $this->container['sale_price8'] = isset($data['sale_price8']) ? $data['sale_price8'] : null;
        $this->container['sale_price9'] = isset($data['sale_price9']) ? $data['sale_price9'] : null;
        $this->container['sale_price10'] = isset($data['sale_price10']) ? $data['sale_price10'] : null;
        $this->container['cost_price'] = isset($data['cost_price']) ? $data['cost_price'] : null;
        $this->container['export_cost1'] = isset($data['export_cost1']) ? $data['export_cost1'] : 'null';
        $this->container['export_cost2'] = isset($data['export_cost2']) ? $data['export_cost2'] : 'null';
        $this->container['group_id'] = isset($data['group_id']) ? $data['group_id'] : null;
        $this->container['stock'] = isset($data['stock']) ? $data['stock'] : 'NO';
        $this->container['stock_count'] = isset($data['stock_count']) ? $data['stock_count'] : null;
        $this->container['stock_limit_notify'] = isset($data['stock_limit_notify']) ? $data['stock_limit_notify'] : false;
        $this->container['stock_limit_notify_frequency'] = isset($data['stock_limit_notify_frequency']) ? $data['stock_limit_notify_frequency'] : 'ALWAYS';
        $this->container['stock_limit'] = isset($data['stock_limit']) ? $data['stock_limit'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['number'] === null) {
            $invalidProperties[] = "'number' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        $allowedValues = $this->getPriceTypeAllowableValues();
        if (!is_null($this->container['price_type']) && !in_array($this->container['price_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'price_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['sale_price'] === null) {
            $invalidProperties[] = "'sale_price' can't be null";
        }
        $allowedValues = $this->getStockAllowableValues();
        if (!is_null($this->container['stock']) && !in_array($this->container['stock'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'stock', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStockLimitNotifyFrequencyAllowableValues();
        if (!is_null($this->container['stock_limit_notify_frequency']) && !in_array($this->container['stock_limit_notify_frequency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'stock_limit_notify_frequency', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number number
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The positions name or description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets document_note
     *
     * @return string
     */
    public function getDocumentNote()
    {
        return $this->container['document_note'];
    }

    /**
     * Sets document_note
     *
     * @param string $document_note This field can be used in the document text areas with the liquid placeholder {{document.item_notes}}. Every note is only displayed once for every kind of product. This is useful if you want to add something like an instruction.
     *
     * @return $this
     */
    public function setDocumentNote($document_note)
    {
        $this->container['document_note'] = $document_note;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note Note for internal use
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return string
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param string $unit unit
     *
     * @return $this
     */
    public function setUnit($unit)
    {
        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets export_identifier
     *
     * @return string
     */
    public function getExportIdentifier()
    {
        return $this->container['export_identifier'];
    }

    /**
     * Sets export_identifier
     *
     * @param string $export_identifier The FAS-Account is the four-digit revenue account, in which the revenue will be entered when doing the export to your tax consultant. In case you want to split your revenue to several revenue accounts, please talk to your tax consultant before, to guarantee an unobstructed use of the interface. For every revenue element, there are number ranges, which can be used. Please avoid using combinations of numbers, which can not be used by your tax consultant.
     *
     * @return $this
     */
    public function setExportIdentifier($export_identifier)
    {
        $this->container['export_identifier'] = $export_identifier;

        return $this;
    }

    /**
     * Gets export_identifier_extended
     *
     * @return \Swagger\Client\Model\PositionExportIdentifierExtended
     */
    public function getExportIdentifierExtended()
    {
        return $this->container['export_identifier_extended'];
    }

    /**
     * Sets export_identifier_extended
     *
     * @param \Swagger\Client\Model\PositionExportIdentifierExtended $export_identifier_extended export_identifier_extended
     *
     * @return $this
     */
    public function setExportIdentifierExtended($export_identifier_extended)
    {
        $this->container['export_identifier_extended'] = $export_identifier_extended;

        return $this;
    }

    /**
     * Gets login_id
     *
     * @return int
     */
    public function getLoginId()
    {
        return $this->container['login_id'];
    }

    /**
     * Sets login_id
     *
     * @param int $login_id login_id
     *
     * @return $this
     */
    public function setLoginId($login_id)
    {
        $this->container['login_id'] = $login_id;

        return $this;
    }

    /**
     * Gets price_type
     *
     * @return string
     */
    public function getPriceType()
    {
        return $this->container['price_type'];
    }

    /**
     * Sets price_type
     *
     * @param string $price_type price_type
     *
     * @return $this
     */
    public function setPriceType($price_type)
    {
        $allowedValues = $this->getPriceTypeAllowableValues();
        if (!is_null($price_type) && !in_array($price_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'price_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['price_type'] = $price_type;

        return $this;
    }

    /**
     * Gets vat_percent
     *
     * @return float
     */
    public function getVatPercent()
    {
        return $this->container['vat_percent'];
    }

    /**
     * Sets vat_percent
     *
     * @param float $vat_percent vat_percent
     *
     * @return $this
     */
    public function setVatPercent($vat_percent)
    {
        $this->container['vat_percent'] = $vat_percent;

        return $this;
    }

    /**
     * Gets sale_price
     *
     * @return float
     */
    public function getSalePrice()
    {
        return $this->container['sale_price'];
    }

    /**
     * Sets sale_price
     *
     * @param float $sale_price Price in cents (e.g. \"150\" = 1.50€)
     *
     * @return $this
     */
    public function setSalePrice($sale_price)
    {
        $this->container['sale_price'] = $sale_price;

        return $this;
    }

    /**
     * Gets sale_price2
     *
     * @return float
     */
    public function getSalePrice2()
    {
        return $this->container['sale_price2'];
    }

    /**
     * Sets sale_price2
     *
     * @param float $sale_price2 Price for customers of group 2 in cents (e.g. \"150\" = 1.50€)
     *
     * @return $this
     */
    public function setSalePrice2($sale_price2)
    {
        $this->container['sale_price2'] = $sale_price2;

        return $this;
    }

    /**
     * Gets sale_price3
     *
     * @return float
     */
    public function getSalePrice3()
    {
        return $this->container['sale_price3'];
    }

    /**
     * Sets sale_price3
     *
     * @param float $sale_price3 Price for customers of group 3 in cents (e.g. \"150\" = 1.50€)
     *
     * @return $this
     */
    public function setSalePrice3($sale_price3)
    {
        $this->container['sale_price3'] = $sale_price3;

        return $this;
    }

    /**
     * Gets sale_price4
     *
     * @return float
     */
    public function getSalePrice4()
    {
        return $this->container['sale_price4'];
    }

    /**
     * Sets sale_price4
     *
     * @param float $sale_price4 Price for customers of group 4 in cents (e.g. \"150\" = 1.50€)
     *
     * @return $this
     */
    public function setSalePrice4($sale_price4)
    {
        $this->container['sale_price4'] = $sale_price4;

        return $this;
    }

    /**
     * Gets sale_price5
     *
     * @return float
     */
    public function getSalePrice5()
    {
        return $this->container['sale_price5'];
    }

    /**
     * Sets sale_price5
     *
     * @param float $sale_price5 Price for customers of group 5 in cents (e.g. \"150\" = 1.50€)
     *
     * @return $this
     */
    public function setSalePrice5($sale_price5)
    {
        $this->container['sale_price5'] = $sale_price5;

        return $this;
    }

    /**
     * Gets sale_price6
     *
     * @return float
     */
    public function getSalePrice6()
    {
        return $this->container['sale_price6'];
    }

    /**
     * Sets sale_price6
     *
     * @param float $sale_price6 Price for customers of group 6 in cents (e.g. \"150\" = 1.50€)
     *
     * @return $this
     */
    public function setSalePrice6($sale_price6)
    {
        $this->container['sale_price6'] = $sale_price6;

        return $this;
    }

    /**
     * Gets sale_price7
     *
     * @return float
     */
    public function getSalePrice7()
    {
        return $this->container['sale_price7'];
    }

    /**
     * Sets sale_price7
     *
     * @param float $sale_price7 Price for customers of group 7 in cents (e.g. \"150\" = 1.50€)
     *
     * @return $this
     */
    public function setSalePrice7($sale_price7)
    {
        $this->container['sale_price7'] = $sale_price7;

        return $this;
    }

    /**
     * Gets sale_price8
     *
     * @return float
     */
    public function getSalePrice8()
    {
        return $this->container['sale_price8'];
    }

    /**
     * Sets sale_price8
     *
     * @param float $sale_price8 Price for customers of group 8 in cents (e.g. \"150\" = 1.50€)
     *
     * @return $this
     */
    public function setSalePrice8($sale_price8)
    {
        $this->container['sale_price8'] = $sale_price8;

        return $this;
    }

    /**
     * Gets sale_price9
     *
     * @return float
     */
    public function getSalePrice9()
    {
        return $this->container['sale_price9'];
    }

    /**
     * Sets sale_price9
     *
     * @param float $sale_price9 Price for customers of group 9 in cents (e.g. \"150\" = 1.50€)
     *
     * @return $this
     */
    public function setSalePrice9($sale_price9)
    {
        $this->container['sale_price9'] = $sale_price9;

        return $this;
    }

    /**
     * Gets sale_price10
     *
     * @return float
     */
    public function getSalePrice10()
    {
        return $this->container['sale_price10'];
    }

    /**
     * Sets sale_price10
     *
     * @param float $sale_price10 Price for customers of group 10 in cents (e.g. \"150\" = 1.50€)
     *
     * @return $this
     */
    public function setSalePrice10($sale_price10)
    {
        $this->container['sale_price10'] = $sale_price10;

        return $this;
    }

    /**
     * Gets cost_price
     *
     * @return float
     */
    public function getCostPrice()
    {
        return $this->container['cost_price'];
    }

    /**
     * Sets cost_price
     *
     * @param float $cost_price Price in cents (e.g. \"150\" = 1.50€)
     *
     * @return $this
     */
    public function setCostPrice($cost_price)
    {
        $this->container['cost_price'] = $cost_price;

        return $this;
    }

    /**
     * Gets export_cost1
     *
     * @return string
     */
    public function getExportCost1()
    {
        return $this->container['export_cost1'];
    }

    /**
     * Sets export_cost1
     *
     * @param string $export_cost1 export_cost1
     *
     * @return $this
     */
    public function setExportCost1($export_cost1)
    {
        $this->container['export_cost1'] = $export_cost1;

        return $this;
    }

    /**
     * Gets export_cost2
     *
     * @return string
     */
    public function getExportCost2()
    {
        return $this->container['export_cost2'];
    }

    /**
     * Sets export_cost2
     *
     * @param string $export_cost2 export_cost2
     *
     * @return $this
     */
    public function setExportCost2($export_cost2)
    {
        $this->container['export_cost2'] = $export_cost2;

        return $this;
    }

    /**
     * Gets group_id
     *
     * @return int
     */
    public function getGroupId()
    {
        return $this->container['group_id'];
    }

    /**
     * Sets group_id
     *
     * @param int $group_id group_id
     *
     * @return $this
     */
    public function setGroupId($group_id)
    {
        $this->container['group_id'] = $group_id;

        return $this;
    }

    /**
     * Gets stock
     *
     * @return string
     */
    public function getStock()
    {
        return $this->container['stock'];
    }

    /**
     * Sets stock
     *
     * @param string $stock Activates stock management for this position
     *
     * @return $this
     */
    public function setStock($stock)
    {
        $allowedValues = $this->getStockAllowableValues();
        if (!is_null($stock) && !in_array($stock, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'stock', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['stock'] = $stock;

        return $this;
    }

    /**
     * Gets stock_count
     *
     * @return int
     */
    public function getStockCount()
    {
        return $this->container['stock_count'];
    }

    /**
     * Sets stock_count
     *
     * @param int $stock_count Current stock count
     *
     * @return $this
     */
    public function setStockCount($stock_count)
    {
        $this->container['stock_count'] = $stock_count;

        return $this;
    }

    /**
     * Gets stock_limit_notify
     *
     * @return bool
     */
    public function getStockLimitNotify()
    {
        return $this->container['stock_limit_notify'];
    }

    /**
     * Sets stock_limit_notify
     *
     * @param bool $stock_limit_notify Notify when stock_count is lower than stock_limit
     *
     * @return $this
     */
    public function setStockLimitNotify($stock_limit_notify)
    {
        $this->container['stock_limit_notify'] = $stock_limit_notify;

        return $this;
    }

    /**
     * Gets stock_limit_notify_frequency
     *
     * @return string
     */
    public function getStockLimitNotifyFrequency()
    {
        return $this->container['stock_limit_notify_frequency'];
    }

    /**
     * Sets stock_limit_notify_frequency
     *
     * @param string $stock_limit_notify_frequency Notify frequency when stock_count is lower than stock_limit (ALWAYS, ONCE)
     *
     * @return $this
     */
    public function setStockLimitNotifyFrequency($stock_limit_notify_frequency)
    {
        $allowedValues = $this->getStockLimitNotifyFrequencyAllowableValues();
        if (!is_null($stock_limit_notify_frequency) && !in_array($stock_limit_notify_frequency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'stock_limit_notify_frequency', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['stock_limit_notify_frequency'] = $stock_limit_notify_frequency;

        return $this;
    }

    /**
     * Gets stock_limit
     *
     * @return int
     */
    public function getStockLimit()
    {
        return $this->container['stock_limit'];
    }

    /**
     * Sets stock_limit
     *
     * @param int $stock_limit stock_limit
     *
     * @return $this
     */
    public function setStockLimit($stock_limit)
    {
        $this->container['stock_limit'] = $stock_limit;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float $quantity Used as the default quantity when adding this position to a document
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
