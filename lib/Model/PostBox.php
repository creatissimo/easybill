<?php
/**
 * PostBox
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * easybill REST API
 *
 * The first version of the easybill REST API. [CHANGELOG](https://api.easybill.de/rest/v1/CHANGELOG.md)  ## Authentication  You can choose between two available methods: `Basic Auth` or `Bearer Token`.  In each HTTP request, one of the following HTTP headers is required:  ``` # Basic Auth Authorization: Basic base64_encode('<email>:<api_key>') # Bearer Token Authorization: Bearer <api_key> ```  ## Limitations  ### Request Limit  * PLUS: 10 requests per minute * BUSINESS: 60 requests per minute  If the limit is exceeded, you will receive the HTTP error: `429 Too Many Requests`  ### Result Limit  All result lists are limited to 100 by default. This limit can be increased by the query parameter `limit` to a maximum of 1000.  ## Query filter  Many list resources can be filtered. In `/documents` you can filter e.g. by number with `/documents?number=111028654`. If you want to filter multiple numbers, you can either enter them separated by commas `/documents?number=111028654,222006895` or as an array `/documents?number[]=111028654&number[]=222006895`.  **Warning**: The maximum size of an HTTP request line in bytes is 4094. If this limit is exceeded, you will receive the HTTP error: `414 Request-URI Too Large`  ### Escape commas in query  You can escape commans in query `name=Patrick\\, Peter` if you submit the header `X-Easybill-Escape: true` in your request.  ## Property login_id  This is the login of your admin or employee account.  ## Date and Date-Time format Please use the timezone `Europe/Berlin`. * **date** = *Y-m-d* = `2016-12-31` * **date-time** = *Y-m-d H:i:s* = `2016-12-31 03:13:37`  Date or datetime can be `null` because the attributes have been added later and the entry is older.
 *
 * OpenAPI spec version: 1.70.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.33
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PostBox Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PostBox implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PostBox';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'document_id' => 'int',
'to' => 'string',
'cc' => 'string',
'from' => 'string',
'subject' => 'string',
'message' => 'string',
'date' => '\DateTime',
'created_at' => '\DateTime',
'processed_at' => '\DateTime',
'send_by_self' => 'bool',
'send_with_attachment' => 'bool',
'type' => 'string',
'status' => 'string',
'status_msg' => 'string',
'login_id' => 'int',
'document_file_type' => 'string',
'post_send_type' => 'string',
'tracking_identifier' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
'document_id' => 'int64',
'to' => null,
'cc' => null,
'from' => null,
'subject' => null,
'message' => null,
'date' => 'date',
'created_at' => 'date-time',
'processed_at' => 'date-time',
'send_by_self' => null,
'send_with_attachment' => null,
'type' => null,
'status' => null,
'status_msg' => null,
'login_id' => 'int64',
'document_file_type' => null,
'post_send_type' => null,
'tracking_identifier' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'document_id' => 'document_id',
'to' => 'to',
'cc' => 'cc',
'from' => 'from',
'subject' => 'subject',
'message' => 'message',
'date' => 'date',
'created_at' => 'created_at',
'processed_at' => 'processed_at',
'send_by_self' => 'send_by_self',
'send_with_attachment' => 'send_with_attachment',
'type' => 'type',
'status' => 'status',
'status_msg' => 'status_msg',
'login_id' => 'login_id',
'document_file_type' => 'document_file_type',
'post_send_type' => 'post_send_type',
'tracking_identifier' => 'tracking_identifier'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'document_id' => 'setDocumentId',
'to' => 'setTo',
'cc' => 'setCc',
'from' => 'setFrom',
'subject' => 'setSubject',
'message' => 'setMessage',
'date' => 'setDate',
'created_at' => 'setCreatedAt',
'processed_at' => 'setProcessedAt',
'send_by_self' => 'setSendBySelf',
'send_with_attachment' => 'setSendWithAttachment',
'type' => 'setType',
'status' => 'setStatus',
'status_msg' => 'setStatusMsg',
'login_id' => 'setLoginId',
'document_file_type' => 'setDocumentFileType',
'post_send_type' => 'setPostSendType',
'tracking_identifier' => 'setTrackingIdentifier'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'document_id' => 'getDocumentId',
'to' => 'getTo',
'cc' => 'getCc',
'from' => 'getFrom',
'subject' => 'getSubject',
'message' => 'getMessage',
'date' => 'getDate',
'created_at' => 'getCreatedAt',
'processed_at' => 'getProcessedAt',
'send_by_self' => 'getSendBySelf',
'send_with_attachment' => 'getSendWithAttachment',
'type' => 'getType',
'status' => 'getStatus',
'status_msg' => 'getStatusMsg',
'login_id' => 'getLoginId',
'document_file_type' => 'getDocumentFileType',
'post_send_type' => 'getPostSendType',
'tracking_identifier' => 'getTrackingIdentifier'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_FAX = 'FAX';
const TYPE_EMAIL = 'EMAIL';
const TYPE_POST = 'POST';
const STATUS_WAITING = 'WAITING';
const STATUS_PREPARE = 'PREPARE';
const STATUS_ERROR = 'ERROR';
const STATUS_OK = 'OK';
const STATUS_PROCESSING = 'PROCESSING';
const DOCUMENT_FILE_TYPE__DEFAULT = 'default';
const DOCUMENT_FILE_TYPE_ZUGFERD1 = 'zugferd1';
const DOCUMENT_FILE_TYPE_ZUGFERD2 = 'zugferd2';
const DOCUMENT_FILE_TYPE_XRECHNUNG = 'xrechnung';
const DOCUMENT_FILE_TYPE_XRECHNUNG_XML = 'xrechnung_xml';
const POST_SEND_TYPE_STANDARD = 'post_send_type_standard';
const POST_SEND_TYPE_REGISTERED = 'post_send_type_registered';
const POST_SEND_TYPE_REGISTERED_AND_PERSONAL = 'post_send_type_registered_and_personal';
const POST_SEND_TYPE_REGISTERED_AND_RECEIPT = 'post_send_type_registered_and_receipt';
const POST_SEND_TYPE_REGISTERED_THROWIN = 'post_send_type_registered_throwin';
const POST_SEND_TYPE_PRIO = 'post_send_type_prio';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_FAX,
self::TYPE_EMAIL,
self::TYPE_POST,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_WAITING,
self::STATUS_PREPARE,
self::STATUS_ERROR,
self::STATUS_OK,
self::STATUS_PROCESSING,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDocumentFileTypeAllowableValues()
    {
        return [
            self::DOCUMENT_FILE_TYPE__DEFAULT,
self::DOCUMENT_FILE_TYPE_ZUGFERD1,
self::DOCUMENT_FILE_TYPE_ZUGFERD2,
self::DOCUMENT_FILE_TYPE_XRECHNUNG,
self::DOCUMENT_FILE_TYPE_XRECHNUNG_XML,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPostSendTypeAllowableValues()
    {
        return [
            self::POST_SEND_TYPE_STANDARD,
self::POST_SEND_TYPE_REGISTERED,
self::POST_SEND_TYPE_REGISTERED_AND_PERSONAL,
self::POST_SEND_TYPE_REGISTERED_AND_RECEIPT,
self::POST_SEND_TYPE_REGISTERED_THROWIN,
self::POST_SEND_TYPE_PRIO,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['document_id'] = isset($data['document_id']) ? $data['document_id'] : null;
        $this->container['to'] = isset($data['to']) ? $data['to'] : null;
        $this->container['cc'] = isset($data['cc']) ? $data['cc'] : null;
        $this->container['from'] = isset($data['from']) ? $data['from'] : null;
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['processed_at'] = isset($data['processed_at']) ? $data['processed_at'] : null;
        $this->container['send_by_self'] = isset($data['send_by_self']) ? $data['send_by_self'] : null;
        $this->container['send_with_attachment'] = isset($data['send_with_attachment']) ? $data['send_with_attachment'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['status_msg'] = isset($data['status_msg']) ? $data['status_msg'] : null;
        $this->container['login_id'] = isset($data['login_id']) ? $data['login_id'] : null;
        $this->container['document_file_type'] = isset($data['document_file_type']) ? $data['document_file_type'] : null;
        $this->container['post_send_type'] = isset($data['post_send_type']) ? $data['post_send_type'] : null;
        $this->container['tracking_identifier'] = isset($data['tracking_identifier']) ? $data['tracking_identifier'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDocumentFileTypeAllowableValues();
        if (!is_null($this->container['document_file_type']) && !in_array($this->container['document_file_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'document_file_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPostSendTypeAllowableValues();
        if (!is_null($this->container['post_send_type']) && !in_array($this->container['post_send_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'post_send_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets document_id
     *
     * @return int
     */
    public function getDocumentId()
    {
        return $this->container['document_id'];
    }

    /**
     * Sets document_id
     *
     * @param int $document_id document_id
     *
     * @return $this
     */
    public function setDocumentId($document_id)
    {
        $this->container['document_id'] = $document_id;

        return $this;
    }

    /**
     * Gets to
     *
     * @return string
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param string $to to
     *
     * @return $this
     */
    public function setTo($to)
    {
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets cc
     *
     * @return string
     */
    public function getCc()
    {
        return $this->container['cc'];
    }

    /**
     * Sets cc
     *
     * @param string $cc cc
     *
     * @return $this
     */
    public function setCc($cc)
    {
        $this->container['cc'] = $cc;

        return $this;
    }

    /**
     * Gets from
     *
     * @return string
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param string $from from
     *
     * @return $this
     */
    public function setFrom($from)
    {
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject subject
     *
     * @return $this
     */
    public function setSubject($subject)
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message message
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date date
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets processed_at
     *
     * @return \DateTime
     */
    public function getProcessedAt()
    {
        return $this->container['processed_at'];
    }

    /**
     * Sets processed_at
     *
     * @param \DateTime $processed_at processed_at
     *
     * @return $this
     */
    public function setProcessedAt($processed_at)
    {
        $this->container['processed_at'] = $processed_at;

        return $this;
    }

    /**
     * Gets send_by_self
     *
     * @return bool
     */
    public function getSendBySelf()
    {
        return $this->container['send_by_self'];
    }

    /**
     * Sets send_by_self
     *
     * @param bool $send_by_self send_by_self
     *
     * @return $this
     */
    public function setSendBySelf($send_by_self)
    {
        $this->container['send_by_self'] = $send_by_self;

        return $this;
    }

    /**
     * Gets send_with_attachment
     *
     * @return bool
     */
    public function getSendWithAttachment()
    {
        return $this->container['send_with_attachment'];
    }

    /**
     * Sets send_with_attachment
     *
     * @param bool $send_with_attachment send_with_attachment
     *
     * @return $this
     */
    public function setSendWithAttachment($send_with_attachment)
    {
        $this->container['send_with_attachment'] = $send_with_attachment;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_msg
     *
     * @return string
     */
    public function getStatusMsg()
    {
        return $this->container['status_msg'];
    }

    /**
     * Sets status_msg
     *
     * @param string $status_msg status_msg
     *
     * @return $this
     */
    public function setStatusMsg($status_msg)
    {
        $this->container['status_msg'] = $status_msg;

        return $this;
    }

    /**
     * Gets login_id
     *
     * @return int
     */
    public function getLoginId()
    {
        return $this->container['login_id'];
    }

    /**
     * Sets login_id
     *
     * @param int $login_id login_id
     *
     * @return $this
     */
    public function setLoginId($login_id)
    {
        $this->container['login_id'] = $login_id;

        return $this;
    }

    /**
     * Gets document_file_type
     *
     * @return string
     */
    public function getDocumentFileType()
    {
        return $this->container['document_file_type'];
    }

    /**
     * Sets document_file_type
     *
     * @param string $document_file_type document_file_type
     *
     * @return $this
     */
    public function setDocumentFileType($document_file_type)
    {
        $allowedValues = $this->getDocumentFileTypeAllowableValues();
        if (!is_null($document_file_type) && !in_array($document_file_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'document_file_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['document_file_type'] = $document_file_type;

        return $this;
    }

    /**
     * Gets post_send_type
     *
     * @return string
     */
    public function getPostSendType()
    {
        return $this->container['post_send_type'];
    }

    /**
     * Sets post_send_type
     *
     * @param string $post_send_type This value indicates what method is used when the document is send via mail. The different types are offered by the german post as additional services. The registered mail options will include a tracking number which will be  added to the postbox when known.  If the value is omitted or empty when a postbox is created with the type \"POST\" post_send_type_standard will be used.  For postbox with a different type than \"POST\" this field will hold a empty string.
     *
     * @return $this
     */
    public function setPostSendType($post_send_type)
    {
        $allowedValues = $this->getPostSendTypeAllowableValues();
        if (!is_null($post_send_type) && !in_array($post_send_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'post_send_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['post_send_type'] = $post_send_type;

        return $this;
    }

    /**
     * Gets tracking_identifier
     *
     * @return string
     */
    public function getTrackingIdentifier()
    {
        return $this->container['tracking_identifier'];
    }

    /**
     * Sets tracking_identifier
     *
     * @param string $tracking_identifier If the document is send with one of the registered send types stated for post_send_type, a tracking identifier will be added to the postbox at a later point when the tracking identifier is provided by our service partner.
     *
     * @return $this
     */
    public function setTrackingIdentifier($tracking_identifier)
    {
        $this->container['tracking_identifier'] = $tracking_identifier;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
