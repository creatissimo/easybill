<?php
/**
 * TimeTracking
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * easybill REST API
 *
 * The first version of the easybill REST API. [CHANGELOG](https://api.easybill.de/rest/v1/CHANGELOG.md)  ## Authentication  You can choose between two available methods: `Basic Auth` or `Bearer Token`.  In each HTTP request, one of the following HTTP headers is required:  ``` # Basic Auth Authorization: Basic base64_encode('<email>:<api_key>') # Bearer Token Authorization: Bearer <api_key> ```  ## Limitations  ### Request Limit  * PLUS: 10 requests per minute * BUSINESS: 60 requests per minute  If the limit is exceeded, you will receive the HTTP error: `429 Too Many Requests`  ### Result Limit  All result lists are limited to 100 by default. This limit can be increased by the query parameter `limit` to a maximum of 1000.  ## Query filter  Many list resources can be filtered. In `/documents` you can filter e.g. by number with `/documents?number=111028654`. If you want to filter multiple numbers, you can either enter them separated by commas `/documents?number=111028654,222006895` or as an array  `/documents?number[]=111028654&number[]=222006895`.  **Warning**: The maximum size of an HTTP request line in bytes is 4094. If this limit is exceeded, you will receive the HTTP error: `414 Request-URI Too Large`  ### Escape commas in query  You can escape commans in query `name=Patrick\\, Peter` if you submit the header `X-Easybill-Escape: true` in your request.  ## Property login_id  This is the login of your admin or employee account.  ## Date and Date-Time format  * **date** = *Y-m-d* = `2016-12-31` * **date-time** = *Y-m-d H:i:s* = `2016-12-31 03:13:37`
 *
 * OpenAPI spec version: 1.12.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * TimeTracking Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class TimeTracking implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'TimeTracking';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cleared_at' => '\DateTime',
        'count' => 'int',
        'created_at' => '\DateTime',
        'date_from_at' => '\DateTime',
        'date_thru_at' => '\DateTime',
        'description' => 'string',
        'hourly_rate' => 'int',
        'id' => 'int',
        'note' => 'string',
        'number' => 'string',
        'position_id' => 'int',
        'project_id' => 'int',
        'login_id' => 'int',
        'timer_value' => 'int',
        'type' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'cleared_at' => 'cleared_at',
        'count' => 'count',
        'created_at' => 'created_at',
        'date_from_at' => 'date_from_at',
        'date_thru_at' => 'date_thru_at',
        'description' => 'description',
        'hourly_rate' => 'hourly_rate',
        'id' => 'id',
        'note' => 'note',
        'number' => 'number',
        'position_id' => 'position_id',
        'project_id' => 'project_id',
        'login_id' => 'login_id',
        'timer_value' => 'timer_value',
        'type' => 'type'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'cleared_at' => 'setClearedAt',
        'count' => 'setCount',
        'created_at' => 'setCreatedAt',
        'date_from_at' => 'setDateFromAt',
        'date_thru_at' => 'setDateThruAt',
        'description' => 'setDescription',
        'hourly_rate' => 'setHourlyRate',
        'id' => 'setId',
        'note' => 'setNote',
        'number' => 'setNumber',
        'position_id' => 'setPositionId',
        'project_id' => 'setProjectId',
        'login_id' => 'setLoginId',
        'timer_value' => 'setTimerValue',
        'type' => 'setType'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'cleared_at' => 'getClearedAt',
        'count' => 'getCount',
        'created_at' => 'getCreatedAt',
        'date_from_at' => 'getDateFromAt',
        'date_thru_at' => 'getDateThruAt',
        'description' => 'getDescription',
        'hourly_rate' => 'getHourlyRate',
        'id' => 'getId',
        'note' => 'getNote',
        'number' => 'getNumber',
        'position_id' => 'getPositionId',
        'project_id' => 'getProjectId',
        'login_id' => 'getLoginId',
        'timer_value' => 'getTimerValue',
        'type' => 'getType'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cleared_at'] = isset($data['cleared_at']) ? $data['cleared_at'] : null;
        $this->container['count'] = isset($data['count']) ? $data['count'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['date_from_at'] = isset($data['date_from_at']) ? $data['date_from_at'] : null;
        $this->container['date_thru_at'] = isset($data['date_thru_at']) ? $data['date_thru_at'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['hourly_rate'] = isset($data['hourly_rate']) ? $data['hourly_rate'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['position_id'] = isset($data['position_id']) ? $data['position_id'] : null;
        $this->container['project_id'] = isset($data['project_id']) ? $data['project_id'] : null;
        $this->container['login_id'] = isset($data['login_id']) ? $data['login_id'] : null;
        $this->container['timer_value'] = isset($data['timer_value']) ? $data['timer_value'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['description'] === null) {
            $invalid_properties[] = "'description' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['description'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets cleared_at
     * @return \DateTime
     */
    public function getClearedAt()
    {
        return $this->container['cleared_at'];
    }

    /**
     * Sets cleared_at
     * @param \DateTime $cleared_at
     * @return $this
     */
    public function setClearedAt($cleared_at)
    {
        $this->container['cleared_at'] = $cleared_at;

        return $this;
    }

    /**
     * Gets count
     * @return int
     */
    public function getCount()
    {
        return $this->container['count'];
    }

    /**
     * Sets count
     * @param int $count
     * @return $this
     */
    public function setCount($count)
    {
        $this->container['count'] = $count;

        return $this;
    }

    /**
     * Gets created_at
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     * @param \DateTime $created_at
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets date_from_at
     * @return \DateTime
     */
    public function getDateFromAt()
    {
        return $this->container['date_from_at'];
    }

    /**
     * Sets date_from_at
     * @param \DateTime $date_from_at
     * @return $this
     */
    public function setDateFromAt($date_from_at)
    {
        $this->container['date_from_at'] = $date_from_at;

        return $this;
    }

    /**
     * Gets date_thru_at
     * @return \DateTime
     */
    public function getDateThruAt()
    {
        return $this->container['date_thru_at'];
    }

    /**
     * Sets date_thru_at
     * @param \DateTime $date_thru_at
     * @return $this
     */
    public function setDateThruAt($date_thru_at)
    {
        $this->container['date_thru_at'] = $date_thru_at;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets hourly_rate
     * @return int
     */
    public function getHourlyRate()
    {
        return $this->container['hourly_rate'];
    }

    /**
     * Sets hourly_rate
     * @param int $hourly_rate
     * @return $this
     */
    public function setHourlyRate($hourly_rate)
    {
        $this->container['hourly_rate'] = $hourly_rate;

        return $this;
    }

    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets note
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     * @param string $note
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets number
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     * @param string $number
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets position_id
     * @return int
     */
    public function getPositionId()
    {
        return $this->container['position_id'];
    }

    /**
     * Sets position_id
     * @param int $position_id
     * @return $this
     */
    public function setPositionId($position_id)
    {
        $this->container['position_id'] = $position_id;

        return $this;
    }

    /**
     * Gets project_id
     * @return int
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     * @param int $project_id
     * @return $this
     */
    public function setProjectId($project_id)
    {
        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets login_id
     * @return int
     */
    public function getLoginId()
    {
        return $this->container['login_id'];
    }

    /**
     * Sets login_id
     * @param int $login_id
     * @return $this
     */
    public function setLoginId($login_id)
    {
        $this->container['login_id'] = $login_id;

        return $this;
    }

    /**
     * Gets timer_value
     * @return int
     */
    public function getTimerValue()
    {
        return $this->container['timer_value'];
    }

    /**
     * Sets timer_value
     * @param int $timer_value
     * @return $this
     */
    public function setTimerValue($timer_value)
    {
        $this->container['timer_value'] = $timer_value;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


