<?php
/**
 * Document
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * easybill REST API
 *
 * The first version of the easybill REST API. [CHANGELOG](https://api.easybill.de/rest/v1/CHANGELOG.md)  ## Authentication  You can choose between two available methods: `Basic Auth` or `Bearer Token`.  In each HTTP request, one of the following HTTP headers is required:  ``` # Basic Auth Authorization: Basic base64_encode('<email>:<api_key>') # Bearer Token Authorization: Bearer <api_key> ```  ## Limitations  ### Request Limit  * PLUS: 10 requests per minute * BUSINESS: 60 requests per minute  If the limit is exceeded, you will receive the HTTP error: `429 Too Many Requests`  ### Result Limit  All result lists are limited to 100 by default. This limit can be increased by the query parameter `limit` to a maximum of 1000.  ## Query filter  Many list resources can be filtered. In `/documents` you can filter e.g. by number with `/documents?number=111028654`. If you want to filter multiple numbers, you can either enter them separated by commas `/documents?number=111028654,222006895` or as an array `/documents?number[]=111028654&number[]=222006895`.  **Warning**: The maximum size of an HTTP request line in bytes is 4094. If this limit is exceeded, you will receive the HTTP error: `414 Request-URI Too Large`  ### Escape commas in query  You can escape commans in query `name=Patrick\\, Peter` if you submit the header `X-Easybill-Escape: true` in your request.  ## Property login_id  This is the login of your admin or employee account.  ## Date and Date-Time format Please use the timezone `Europe/Berlin`. * **date** = *Y-m-d* = `2016-12-31` * **date-time** = *Y-m-d H:i:s* = `2016-12-31 03:13:37`  Date or datetime can be `null` because the attributes have been added later and the entry is older.
 *
 * OpenAPI spec version: 1.70.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.33
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Document Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Document implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Document';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'address' => '\Swagger\Client\Model\DocumentAddress',
'attachment_ids' => 'int[]',
'label_address' => '\Swagger\Client\Model\DocumentAddress',
'amount' => 'int',
'amount_net' => 'int',
'bank_debit_form' => 'string',
'billing_country' => 'string',
'calc_vat_from' => 'int',
'cancel_id' => 'int',
'cash_allowance' => 'float',
'cash_allowance_days' => 'int',
'cash_allowance_text' => 'string',
'contact_id' => 'int',
'contact_label' => 'string',
'contact_text' => 'string',
'created_at' => '\DateTime',
'currency' => 'string',
'customer_id' => 'int',
'customer_snapshot' => '\Swagger\Client\Model\CustomerSnapshot',
'discount' => 'string',
'discount_type' => 'string',
'document_date' => '\DateTime',
'due_date' => '\DateTime',
'edited_at' => '\DateTime',
'external_id' => 'string',
'replica_url' => 'string',
'grace_period' => 'int',
'due_in_days' => 'int',
'id' => 'int',
'is_archive' => 'bool',
'is_draft' => 'bool',
'is_replica' => 'bool',
'is_cold' => 'bool',
'is_oss' => 'bool',
'coldstorage_due_date' => '\DateTime',
'item_notes' => 'string[]',
'items' => '\Swagger\Client\Model\DocumentPosition[]',
'last_postbox_id' => 'int',
'login_id' => 'int',
'number' => 'string',
'order_number' => 'string',
'buyer_reference' => 'string',
'paid_amount' => 'int',
'paid_at' => '\DateTime',
'pdf_pages' => 'int',
'pdf_template' => 'string',
'project_id' => 'int',
'recurring_options' => '\Swagger\Client\Model\DocumentRecurring',
'ref_id' => 'int',
'service_date' => '\Swagger\Client\Model\ServiceDate',
'shipping_country' => 'string',
'status' => 'string',
'text' => 'string',
'text_prefix' => 'string',
'text_tax' => 'string',
'title' => 'string',
'type' => 'string',
'use_shipping_address' => 'bool',
'vat_country' => 'string',
'vat_id' => 'string',
'fulfillment_country' => 'string',
'vat_option' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'address' => null,
'attachment_ids' => null,
'label_address' => null,
'amount' => null,
'amount_net' => null,
'bank_debit_form' => null,
'billing_country' => null,
'calc_vat_from' => null,
'cancel_id' => 'int64',
'cash_allowance' => 'float',
'cash_allowance_days' => null,
'cash_allowance_text' => null,
'contact_id' => 'int64',
'contact_label' => null,
'contact_text' => null,
'created_at' => 'date-time',
'currency' => null,
'customer_id' => 'int64',
'customer_snapshot' => null,
'discount' => null,
'discount_type' => null,
'document_date' => 'date',
'due_date' => 'date',
'edited_at' => 'date-time',
'external_id' => null,
'replica_url' => null,
'grace_period' => null,
'due_in_days' => null,
'id' => 'int64',
'is_archive' => null,
'is_draft' => null,
'is_replica' => null,
'is_cold' => null,
'is_oss' => null,
'coldstorage_due_date' => 'date',
'item_notes' => null,
'items' => null,
'last_postbox_id' => 'int64',
'login_id' => 'int64',
'number' => null,
'order_number' => null,
'buyer_reference' => null,
'paid_amount' => null,
'paid_at' => 'date',
'pdf_pages' => null,
'pdf_template' => null,
'project_id' => null,
'recurring_options' => null,
'ref_id' => 'int64',
'service_date' => null,
'shipping_country' => null,
'status' => null,
'text' => null,
'text_prefix' => null,
'text_tax' => null,
'title' => null,
'type' => null,
'use_shipping_address' => null,
'vat_country' => null,
'vat_id' => null,
'fulfillment_country' => null,
'vat_option' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address' => 'address',
'attachment_ids' => 'attachment_ids',
'label_address' => 'label_address',
'amount' => 'amount',
'amount_net' => 'amount_net',
'bank_debit_form' => 'bank_debit_form',
'billing_country' => 'billing_country',
'calc_vat_from' => 'calc_vat_from',
'cancel_id' => 'cancel_id',
'cash_allowance' => 'cash_allowance',
'cash_allowance_days' => 'cash_allowance_days',
'cash_allowance_text' => 'cash_allowance_text',
'contact_id' => 'contact_id',
'contact_label' => 'contact_label',
'contact_text' => 'contact_text',
'created_at' => 'created_at',
'currency' => 'currency',
'customer_id' => 'customer_id',
'customer_snapshot' => 'customer_snapshot',
'discount' => 'discount',
'discount_type' => 'discount_type',
'document_date' => 'document_date',
'due_date' => 'due_date',
'edited_at' => 'edited_at',
'external_id' => 'external_id',
'replica_url' => 'replica_url',
'grace_period' => 'grace_period',
'due_in_days' => 'due_in_days',
'id' => 'id',
'is_archive' => 'is_archive',
'is_draft' => 'is_draft',
'is_replica' => 'is_replica',
'is_cold' => 'is_cold',
'is_oss' => 'is_oss',
'coldstorage_due_date' => 'coldstorage_due_date',
'item_notes' => 'item_notes',
'items' => 'items',
'last_postbox_id' => 'last_postbox_id',
'login_id' => 'login_id',
'number' => 'number',
'order_number' => 'order_number',
'buyer_reference' => 'buyer_reference',
'paid_amount' => 'paid_amount',
'paid_at' => 'paid_at',
'pdf_pages' => 'pdf_pages',
'pdf_template' => 'pdf_template',
'project_id' => 'project_id',
'recurring_options' => 'recurring_options',
'ref_id' => 'ref_id',
'service_date' => 'service_date',
'shipping_country' => 'shipping_country',
'status' => 'status',
'text' => 'text',
'text_prefix' => 'text_prefix',
'text_tax' => 'text_tax',
'title' => 'title',
'type' => 'type',
'use_shipping_address' => 'use_shipping_address',
'vat_country' => 'vat_country',
'vat_id' => 'vat_id',
'fulfillment_country' => 'fulfillment_country',
'vat_option' => 'vat_option'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address' => 'setAddress',
'attachment_ids' => 'setAttachmentIds',
'label_address' => 'setLabelAddress',
'amount' => 'setAmount',
'amount_net' => 'setAmountNet',
'bank_debit_form' => 'setBankDebitForm',
'billing_country' => 'setBillingCountry',
'calc_vat_from' => 'setCalcVatFrom',
'cancel_id' => 'setCancelId',
'cash_allowance' => 'setCashAllowance',
'cash_allowance_days' => 'setCashAllowanceDays',
'cash_allowance_text' => 'setCashAllowanceText',
'contact_id' => 'setContactId',
'contact_label' => 'setContactLabel',
'contact_text' => 'setContactText',
'created_at' => 'setCreatedAt',
'currency' => 'setCurrency',
'customer_id' => 'setCustomerId',
'customer_snapshot' => 'setCustomerSnapshot',
'discount' => 'setDiscount',
'discount_type' => 'setDiscountType',
'document_date' => 'setDocumentDate',
'due_date' => 'setDueDate',
'edited_at' => 'setEditedAt',
'external_id' => 'setExternalId',
'replica_url' => 'setReplicaUrl',
'grace_period' => 'setGracePeriod',
'due_in_days' => 'setDueInDays',
'id' => 'setId',
'is_archive' => 'setIsArchive',
'is_draft' => 'setIsDraft',
'is_replica' => 'setIsReplica',
'is_cold' => 'setIsCold',
'is_oss' => 'setIsOss',
'coldstorage_due_date' => 'setColdstorageDueDate',
'item_notes' => 'setItemNotes',
'items' => 'setItems',
'last_postbox_id' => 'setLastPostboxId',
'login_id' => 'setLoginId',
'number' => 'setNumber',
'order_number' => 'setOrderNumber',
'buyer_reference' => 'setBuyerReference',
'paid_amount' => 'setPaidAmount',
'paid_at' => 'setPaidAt',
'pdf_pages' => 'setPdfPages',
'pdf_template' => 'setPdfTemplate',
'project_id' => 'setProjectId',
'recurring_options' => 'setRecurringOptions',
'ref_id' => 'setRefId',
'service_date' => 'setServiceDate',
'shipping_country' => 'setShippingCountry',
'status' => 'setStatus',
'text' => 'setText',
'text_prefix' => 'setTextPrefix',
'text_tax' => 'setTextTax',
'title' => 'setTitle',
'type' => 'setType',
'use_shipping_address' => 'setUseShippingAddress',
'vat_country' => 'setVatCountry',
'vat_id' => 'setVatId',
'fulfillment_country' => 'setFulfillmentCountry',
'vat_option' => 'setVatOption'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address' => 'getAddress',
'attachment_ids' => 'getAttachmentIds',
'label_address' => 'getLabelAddress',
'amount' => 'getAmount',
'amount_net' => 'getAmountNet',
'bank_debit_form' => 'getBankDebitForm',
'billing_country' => 'getBillingCountry',
'calc_vat_from' => 'getCalcVatFrom',
'cancel_id' => 'getCancelId',
'cash_allowance' => 'getCashAllowance',
'cash_allowance_days' => 'getCashAllowanceDays',
'cash_allowance_text' => 'getCashAllowanceText',
'contact_id' => 'getContactId',
'contact_label' => 'getContactLabel',
'contact_text' => 'getContactText',
'created_at' => 'getCreatedAt',
'currency' => 'getCurrency',
'customer_id' => 'getCustomerId',
'customer_snapshot' => 'getCustomerSnapshot',
'discount' => 'getDiscount',
'discount_type' => 'getDiscountType',
'document_date' => 'getDocumentDate',
'due_date' => 'getDueDate',
'edited_at' => 'getEditedAt',
'external_id' => 'getExternalId',
'replica_url' => 'getReplicaUrl',
'grace_period' => 'getGracePeriod',
'due_in_days' => 'getDueInDays',
'id' => 'getId',
'is_archive' => 'getIsArchive',
'is_draft' => 'getIsDraft',
'is_replica' => 'getIsReplica',
'is_cold' => 'getIsCold',
'is_oss' => 'getIsOss',
'coldstorage_due_date' => 'getColdstorageDueDate',
'item_notes' => 'getItemNotes',
'items' => 'getItems',
'last_postbox_id' => 'getLastPostboxId',
'login_id' => 'getLoginId',
'number' => 'getNumber',
'order_number' => 'getOrderNumber',
'buyer_reference' => 'getBuyerReference',
'paid_amount' => 'getPaidAmount',
'paid_at' => 'getPaidAt',
'pdf_pages' => 'getPdfPages',
'pdf_template' => 'getPdfTemplate',
'project_id' => 'getProjectId',
'recurring_options' => 'getRecurringOptions',
'ref_id' => 'getRefId',
'service_date' => 'getServiceDate',
'shipping_country' => 'getShippingCountry',
'status' => 'getStatus',
'text' => 'getText',
'text_prefix' => 'getTextPrefix',
'text_tax' => 'getTextTax',
'title' => 'getTitle',
'type' => 'getType',
'use_shipping_address' => 'getUseShippingAddress',
'vat_country' => 'getVatCountry',
'vat_id' => 'getVatId',
'fulfillment_country' => 'getFulfillmentCountry',
'vat_option' => 'getVatOption'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DISCOUNT_TYPE_PERCENT = 'PERCENT';
const DISCOUNT_TYPE_AMOUNT = 'AMOUNT';
const STATUS_ACCEPT = 'ACCEPT';
const STATUS_DONE = 'DONE';
const STATUS_DROPSHIPPING = 'DROPSHIPPING';
const STATUS_CANCEL = 'CANCEL';
const TYPE_INVOICE = 'INVOICE';
const TYPE_RECURRING = 'RECURRING';
const TYPE_CREDIT = 'CREDIT';
const TYPE_OFFER = 'OFFER';
const TYPE_REMINDER = 'REMINDER';
const TYPE_DUNNING = 'DUNNING';
const TYPE_STORNO = 'STORNO';
const TYPE_STORNO_CREDIT = 'STORNO_CREDIT';
const TYPE_DELIVERY = 'DELIVERY';
const TYPE_PDF = 'PDF';
const TYPE_CHARGE = 'CHARGE';
const TYPE_CHARGE_CONFIRM = 'CHARGE_CONFIRM';
const TYPE_LETTER = 'LETTER';
const TYPE_ORDER = 'ORDER';
const TYPE_PROFORMA_INVOICE = 'PROFORMA_INVOICE';
const TYPE_STORNO_PROFORMA_INVOICE = 'STORNO_PROFORMA_INVOICE';
const VAT_OPTION_NULL = NULL;
const VAT_OPTION_N_STB = 'nStb';
const VAT_OPTION_N_STB_UST_ID = 'nStbUstID';
const VAT_OPTION_N_STB_NONE_UST_ID = 'nStbNoneUstID';
const VAT_OPTION_N_STB_IM = 'nStbIm';
const VAT_OPTION_REVC = 'revc';
const VAT_OPTION_IG = 'IG';
const VAT_OPTION_AL = 'AL';
const VAT_OPTION_S_STFR = 'sStfr';
const VAT_OPTION_SMALL_BUSINESS = 'smallBusiness';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDiscountTypeAllowableValues()
    {
        return [
            self::DISCOUNT_TYPE_PERCENT,
self::DISCOUNT_TYPE_AMOUNT,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ACCEPT,
self::STATUS_DONE,
self::STATUS_DROPSHIPPING,
self::STATUS_CANCEL,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_INVOICE,
self::TYPE_RECURRING,
self::TYPE_CREDIT,
self::TYPE_OFFER,
self::TYPE_REMINDER,
self::TYPE_DUNNING,
self::TYPE_STORNO,
self::TYPE_STORNO_CREDIT,
self::TYPE_DELIVERY,
self::TYPE_PDF,
self::TYPE_CHARGE,
self::TYPE_CHARGE_CONFIRM,
self::TYPE_LETTER,
self::TYPE_ORDER,
self::TYPE_PROFORMA_INVOICE,
self::TYPE_STORNO_PROFORMA_INVOICE,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVatOptionAllowableValues()
    {
        return [
            self::VAT_OPTION_NULL,
self::VAT_OPTION_N_STB,
self::VAT_OPTION_N_STB_UST_ID,
self::VAT_OPTION_N_STB_NONE_UST_ID,
self::VAT_OPTION_N_STB_IM,
self::VAT_OPTION_REVC,
self::VAT_OPTION_IG,
self::VAT_OPTION_AL,
self::VAT_OPTION_S_STFR,
self::VAT_OPTION_SMALL_BUSINESS,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['attachment_ids'] = isset($data['attachment_ids']) ? $data['attachment_ids'] : null;
        $this->container['label_address'] = isset($data['label_address']) ? $data['label_address'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['amount_net'] = isset($data['amount_net']) ? $data['amount_net'] : null;
        $this->container['bank_debit_form'] = isset($data['bank_debit_form']) ? $data['bank_debit_form'] : null;
        $this->container['billing_country'] = isset($data['billing_country']) ? $data['billing_country'] : null;
        $this->container['calc_vat_from'] = isset($data['calc_vat_from']) ? $data['calc_vat_from'] : null;
        $this->container['cancel_id'] = isset($data['cancel_id']) ? $data['cancel_id'] : null;
        $this->container['cash_allowance'] = isset($data['cash_allowance']) ? $data['cash_allowance'] : null;
        $this->container['cash_allowance_days'] = isset($data['cash_allowance_days']) ? $data['cash_allowance_days'] : null;
        $this->container['cash_allowance_text'] = isset($data['cash_allowance_text']) ? $data['cash_allowance_text'] : null;
        $this->container['contact_id'] = isset($data['contact_id']) ? $data['contact_id'] : null;
        $this->container['contact_label'] = isset($data['contact_label']) ? $data['contact_label'] : '';
        $this->container['contact_text'] = isset($data['contact_text']) ? $data['contact_text'] : '';
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : 'EUR';
        $this->container['customer_id'] = isset($data['customer_id']) ? $data['customer_id'] : null;
        $this->container['customer_snapshot'] = isset($data['customer_snapshot']) ? $data['customer_snapshot'] : null;
        $this->container['discount'] = isset($data['discount']) ? $data['discount'] : null;
        $this->container['discount_type'] = isset($data['discount_type']) ? $data['discount_type'] : null;
        $this->container['document_date'] = isset($data['document_date']) ? $data['document_date'] : null;
        $this->container['due_date'] = isset($data['due_date']) ? $data['due_date'] : null;
        $this->container['edited_at'] = isset($data['edited_at']) ? $data['edited_at'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['replica_url'] = isset($data['replica_url']) ? $data['replica_url'] : null;
        $this->container['grace_period'] = isset($data['grace_period']) ? $data['grace_period'] : null;
        $this->container['due_in_days'] = isset($data['due_in_days']) ? $data['due_in_days'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['is_archive'] = isset($data['is_archive']) ? $data['is_archive'] : false;
        $this->container['is_draft'] = isset($data['is_draft']) ? $data['is_draft'] : null;
        $this->container['is_replica'] = isset($data['is_replica']) ? $data['is_replica'] : false;
        $this->container['is_cold'] = isset($data['is_cold']) ? $data['is_cold'] : false;
        $this->container['is_oss'] = isset($data['is_oss']) ? $data['is_oss'] : false;
        $this->container['coldstorage_due_date'] = isset($data['coldstorage_due_date']) ? $data['coldstorage_due_date'] : null;
        $this->container['item_notes'] = isset($data['item_notes']) ? $data['item_notes'] : null;
        $this->container['items'] = isset($data['items']) ? $data['items'] : null;
        $this->container['last_postbox_id'] = isset($data['last_postbox_id']) ? $data['last_postbox_id'] : null;
        $this->container['login_id'] = isset($data['login_id']) ? $data['login_id'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['order_number'] = isset($data['order_number']) ? $data['order_number'] : '';
        $this->container['buyer_reference'] = isset($data['buyer_reference']) ? $data['buyer_reference'] : '';
        $this->container['paid_amount'] = isset($data['paid_amount']) ? $data['paid_amount'] : null;
        $this->container['paid_at'] = isset($data['paid_at']) ? $data['paid_at'] : null;
        $this->container['pdf_pages'] = isset($data['pdf_pages']) ? $data['pdf_pages'] : null;
        $this->container['pdf_template'] = isset($data['pdf_template']) ? $data['pdf_template'] : null;
        $this->container['project_id'] = isset($data['project_id']) ? $data['project_id'] : null;
        $this->container['recurring_options'] = isset($data['recurring_options']) ? $data['recurring_options'] : null;
        $this->container['ref_id'] = isset($data['ref_id']) ? $data['ref_id'] : null;
        $this->container['service_date'] = isset($data['service_date']) ? $data['service_date'] : null;
        $this->container['shipping_country'] = isset($data['shipping_country']) ? $data['shipping_country'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['text'] = isset($data['text']) ? $data['text'] : null;
        $this->container['text_prefix'] = isset($data['text_prefix']) ? $data['text_prefix'] : null;
        $this->container['text_tax'] = isset($data['text_tax']) ? $data['text_tax'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : 'INVOICE';
        $this->container['use_shipping_address'] = isset($data['use_shipping_address']) ? $data['use_shipping_address'] : false;
        $this->container['vat_country'] = isset($data['vat_country']) ? $data['vat_country'] : null;
        $this->container['vat_id'] = isset($data['vat_id']) ? $data['vat_id'] : '';
        $this->container['fulfillment_country'] = isset($data['fulfillment_country']) ? $data['fulfillment_country'] : null;
        $this->container['vat_option'] = isset($data['vat_option']) ? $data['vat_option'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDiscountTypeAllowableValues();
        if (!is_null($this->container['discount_type']) && !in_array($this->container['discount_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'discount_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVatOptionAllowableValues();
        if (!is_null($this->container['vat_option']) && !in_array($this->container['vat_option'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'vat_option', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address
     *
     * @return \Swagger\Client\Model\DocumentAddress
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Swagger\Client\Model\DocumentAddress $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets attachment_ids
     *
     * @return int[]
     */
    public function getAttachmentIds()
    {
        return $this->container['attachment_ids'];
    }

    /**
     * Sets attachment_ids
     *
     * @param int[] $attachment_ids attachment_ids
     *
     * @return $this
     */
    public function setAttachmentIds($attachment_ids)
    {
        $this->container['attachment_ids'] = $attachment_ids;

        return $this;
    }

    /**
     * Gets label_address
     *
     * @return \Swagger\Client\Model\DocumentAddress
     */
    public function getLabelAddress()
    {
        return $this->container['label_address'];
    }

    /**
     * Sets label_address
     *
     * @param \Swagger\Client\Model\DocumentAddress $label_address label_address
     *
     * @return $this
     */
    public function setLabelAddress($label_address)
    {
        $this->container['label_address'] = $label_address;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount Amount in cents  (e.g. \"150\" = 1.50€)
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets amount_net
     *
     * @return int
     */
    public function getAmountNet()
    {
        return $this->container['amount_net'];
    }

    /**
     * Sets amount_net
     *
     * @param int $amount_net Amount in cents  (e.g. \"150\" = 1.50€)
     *
     * @return $this
     */
    public function setAmountNet($amount_net)
    {
        $this->container['amount_net'] = $amount_net;

        return $this;
    }

    /**
     * Gets bank_debit_form
     *
     * @return string
     */
    public function getBankDebitForm()
    {
        return $this->container['bank_debit_form'];
    }

    /**
     * Sets bank_debit_form
     *
     * @param string $bank_debit_form bank_debit_form
     *
     * @return $this
     */
    public function setBankDebitForm($bank_debit_form)
    {
        $this->container['bank_debit_form'] = $bank_debit_form;

        return $this;
    }

    /**
     * Gets billing_country
     *
     * @return string
     */
    public function getBillingCountry()
    {
        return $this->container['billing_country'];
    }

    /**
     * Sets billing_country
     *
     * @param string $billing_country billing_country
     *
     * @return $this
     */
    public function setBillingCountry($billing_country)
    {
        $this->container['billing_country'] = $billing_country;

        return $this;
    }

    /**
     * Gets calc_vat_from
     *
     * @return int
     */
    public function getCalcVatFrom()
    {
        return $this->container['calc_vat_from'];
    }

    /**
     * Sets calc_vat_from
     *
     * @param int $calc_vat_from 0 === Net, 1 === Gross.
     *
     * @return $this
     */
    public function setCalcVatFrom($calc_vat_from)
    {
        $this->container['calc_vat_from'] = $calc_vat_from;

        return $this;
    }

    /**
     * Gets cancel_id
     *
     * @return int
     */
    public function getCancelId()
    {
        return $this->container['cancel_id'];
    }

    /**
     * Sets cancel_id
     *
     * @param int $cancel_id ID from the cancel document. Only for document type INVOICE.
     *
     * @return $this
     */
    public function setCancelId($cancel_id)
    {
        $this->container['cancel_id'] = $cancel_id;

        return $this;
    }

    /**
     * Gets cash_allowance
     *
     * @return float
     */
    public function getCashAllowance()
    {
        return $this->container['cash_allowance'];
    }

    /**
     * Sets cash_allowance
     *
     * @param float $cash_allowance cash_allowance
     *
     * @return $this
     */
    public function setCashAllowance($cash_allowance)
    {
        $this->container['cash_allowance'] = $cash_allowance;

        return $this;
    }

    /**
     * Gets cash_allowance_days
     *
     * @return int
     */
    public function getCashAllowanceDays()
    {
        return $this->container['cash_allowance_days'];
    }

    /**
     * Sets cash_allowance_days
     *
     * @param int $cash_allowance_days cash_allowance_days
     *
     * @return $this
     */
    public function setCashAllowanceDays($cash_allowance_days)
    {
        $this->container['cash_allowance_days'] = $cash_allowance_days;

        return $this;
    }

    /**
     * Gets cash_allowance_text
     *
     * @return string
     */
    public function getCashAllowanceText()
    {
        return $this->container['cash_allowance_text'];
    }

    /**
     * Sets cash_allowance_text
     *
     * @param string $cash_allowance_text cash_allowance_text
     *
     * @return $this
     */
    public function setCashAllowanceText($cash_allowance_text)
    {
        $this->container['cash_allowance_text'] = $cash_allowance_text;

        return $this;
    }

    /**
     * Gets contact_id
     *
     * @return int
     */
    public function getContactId()
    {
        return $this->container['contact_id'];
    }

    /**
     * Sets contact_id
     *
     * @param int $contact_id contact_id
     *
     * @return $this
     */
    public function setContactId($contact_id)
    {
        $this->container['contact_id'] = $contact_id;

        return $this;
    }

    /**
     * Gets contact_label
     *
     * @return string
     */
    public function getContactLabel()
    {
        return $this->container['contact_label'];
    }

    /**
     * Sets contact_label
     *
     * @param string $contact_label contact_label
     *
     * @return $this
     */
    public function setContactLabel($contact_label)
    {
        $this->container['contact_label'] = $contact_label;

        return $this;
    }

    /**
     * Gets contact_text
     *
     * @return string
     */
    public function getContactText()
    {
        return $this->container['contact_text'];
    }

    /**
     * Sets contact_text
     *
     * @param string $contact_text contact_text
     *
     * @return $this
     */
    public function setContactText($contact_text)
    {
        $this->container['contact_text'] = $contact_text;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return int
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param int $customer_id customer_id
     *
     * @return $this
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets customer_snapshot
     *
     * @return \Swagger\Client\Model\CustomerSnapshot
     */
    public function getCustomerSnapshot()
    {
        return $this->container['customer_snapshot'];
    }

    /**
     * Sets customer_snapshot
     *
     * @param \Swagger\Client\Model\CustomerSnapshot $customer_snapshot customer_snapshot
     *
     * @return $this
     */
    public function setCustomerSnapshot($customer_snapshot)
    {
        $this->container['customer_snapshot'] = $customer_snapshot;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return string
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param string $discount discount
     *
     * @return $this
     */
    public function setDiscount($discount)
    {
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets discount_type
     *
     * @return string
     */
    public function getDiscountType()
    {
        return $this->container['discount_type'];
    }

    /**
     * Sets discount_type
     *
     * @param string $discount_type discount_type
     *
     * @return $this
     */
    public function setDiscountType($discount_type)
    {
        $allowedValues = $this->getDiscountTypeAllowableValues();
        if (!is_null($discount_type) && !in_array($discount_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'discount_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['discount_type'] = $discount_type;

        return $this;
    }

    /**
     * Gets document_date
     *
     * @return \DateTime
     */
    public function getDocumentDate()
    {
        return $this->container['document_date'];
    }

    /**
     * Sets document_date
     *
     * @param \DateTime $document_date document_date
     *
     * @return $this
     */
    public function setDocumentDate($document_date)
    {
        $this->container['document_date'] = $document_date;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return \DateTime
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param \DateTime $due_date To change the value use grace_period.
     *
     * @return $this
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets edited_at
     *
     * @return \DateTime
     */
    public function getEditedAt()
    {
        return $this->container['edited_at'];
    }

    /**
     * Sets edited_at
     *
     * @param \DateTime $edited_at edited_at
     *
     * @return $this
     */
    public function setEditedAt($edited_at)
    {
        $this->container['edited_at'] = $edited_at;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id external_id
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets replica_url
     *
     * @return string
     */
    public function getReplicaUrl()
    {
        return $this->container['replica_url'];
    }

    /**
     * Sets replica_url
     *
     * @param string $replica_url replica_url
     *
     * @return $this
     */
    public function setReplicaUrl($replica_url)
    {
        $this->container['replica_url'] = $replica_url;

        return $this;
    }

    /**
     * Gets grace_period
     *
     * @return int
     */
    public function getGracePeriod()
    {
        return $this->container['grace_period'];
    }

    /**
     * Sets grace_period
     *
     * @param int $grace_period will be replaced by its alias due_in_days.
     *
     * @return $this
     */
    public function setGracePeriod($grace_period)
    {
        $this->container['grace_period'] = $grace_period;

        return $this;
    }

    /**
     * Gets due_in_days
     *
     * @return int
     */
    public function getDueInDays()
    {
        return $this->container['due_in_days'];
    }

    /**
     * Sets due_in_days
     *
     * @param int $due_in_days due date in days.
     *
     * @return $this
     */
    public function setDueInDays($due_in_days)
    {
        $this->container['due_in_days'] = $due_in_days;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_archive
     *
     * @return bool
     */
    public function getIsArchive()
    {
        return $this->container['is_archive'];
    }

    /**
     * Sets is_archive
     *
     * @param bool $is_archive is_archive
     *
     * @return $this
     */
    public function setIsArchive($is_archive)
    {
        $this->container['is_archive'] = $is_archive;

        return $this;
    }

    /**
     * Gets is_draft
     *
     * @return bool
     */
    public function getIsDraft()
    {
        return $this->container['is_draft'];
    }

    /**
     * Sets is_draft
     *
     * @param bool $is_draft This property is read only. To finish the document call /documents/{id}/done.
     *
     * @return $this
     */
    public function setIsDraft($is_draft)
    {
        $this->container['is_draft'] = $is_draft;

        return $this;
    }

    /**
     * Gets is_replica
     *
     * @return bool
     */
    public function getIsReplica()
    {
        return $this->container['is_replica'];
    }

    /**
     * Sets is_replica
     *
     * @param bool $is_replica Marks a document as a replica from another software.
     *
     * @return $this
     */
    public function setIsReplica($is_replica)
    {
        $this->container['is_replica'] = $is_replica;

        return $this;
    }

    /**
     * Gets is_cold
     *
     * @return bool
     */
    public function getIsCold()
    {
        return $this->container['is_cold'];
    }

    /**
     * Sets is_cold
     *
     * @param bool $is_cold Indicates if a document is in the long term archive
     *
     * @return $this
     */
    public function setIsCold($is_cold)
    {
        $this->container['is_cold'] = $is_cold;

        return $this;
    }

    /**
     * Gets is_oss
     *
     * @return bool
     */
    public function getIsOss()
    {
        return $this->container['is_oss'];
    }

    /**
     * Sets is_oss
     *
     * @param bool $is_oss Indicates if a document is a one-stop-shop document
     *
     * @return $this
     */
    public function setIsOss($is_oss)
    {
        $this->container['is_oss'] = $is_oss;

        return $this;
    }

    /**
     * Gets coldstorage_due_date
     *
     * @return \DateTime
     */
    public function getColdstorageDueDate()
    {
        return $this->container['coldstorage_due_date'];
    }

    /**
     * Sets coldstorage_due_date
     *
     * @param \DateTime $coldstorage_due_date Signals when the document should be moved to the long term archive
     *
     * @return $this
     */
    public function setColdstorageDueDate($coldstorage_due_date)
    {
        $this->container['coldstorage_due_date'] = $coldstorage_due_date;

        return $this;
    }

    /**
     * Gets item_notes
     *
     * @return string[]
     */
    public function getItemNotes()
    {
        return $this->container['item_notes'];
    }

    /**
     * Sets item_notes
     *
     * @param string[] $item_notes Field holds all unique document_note of items for the document
     *
     * @return $this
     */
    public function setItemNotes($item_notes)
    {
        $this->container['item_notes'] = $item_notes;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \Swagger\Client\Model\DocumentPosition[]
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \Swagger\Client\Model\DocumentPosition[] $items items
     *
     * @return $this
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets last_postbox_id
     *
     * @return int
     */
    public function getLastPostboxId()
    {
        return $this->container['last_postbox_id'];
    }

    /**
     * Sets last_postbox_id
     *
     * @param int $last_postbox_id last_postbox_id
     *
     * @return $this
     */
    public function setLastPostboxId($last_postbox_id)
    {
        $this->container['last_postbox_id'] = $last_postbox_id;

        return $this;
    }

    /**
     * Gets login_id
     *
     * @return int
     */
    public function getLoginId()
    {
        return $this->container['login_id'];
    }

    /**
     * Sets login_id
     *
     * @param int $login_id If omitted or null, the currently active login is used.
     *
     * @return $this
     */
    public function setLoginId($login_id)
    {
        $this->container['login_id'] = $login_id;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number number
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets order_number
     *
     * @return string
     */
    public function getOrderNumber()
    {
        return $this->container['order_number'];
    }

    /**
     * Sets order_number
     *
     * @param string $order_number order_number
     *
     * @return $this
     */
    public function setOrderNumber($order_number)
    {
        $this->container['order_number'] = $order_number;

        return $this;
    }

    /**
     * Gets buyer_reference
     *
     * @return string
     */
    public function getBuyerReference()
    {
        return $this->container['buyer_reference'];
    }

    /**
     * Sets buyer_reference
     *
     * @param string $buyer_reference buyer_reference
     *
     * @return $this
     */
    public function setBuyerReference($buyer_reference)
    {
        $this->container['buyer_reference'] = $buyer_reference;

        return $this;
    }

    /**
     * Gets paid_amount
     *
     * @return int
     */
    public function getPaidAmount()
    {
        return $this->container['paid_amount'];
    }

    /**
     * Sets paid_amount
     *
     * @param int $paid_amount paid_amount
     *
     * @return $this
     */
    public function setPaidAmount($paid_amount)
    {
        $this->container['paid_amount'] = $paid_amount;

        return $this;
    }

    /**
     * Gets paid_at
     *
     * @return \DateTime
     */
    public function getPaidAt()
    {
        return $this->container['paid_at'];
    }

    /**
     * Sets paid_at
     *
     * @param \DateTime $paid_at paid_at
     *
     * @return $this
     */
    public function setPaidAt($paid_at)
    {
        $this->container['paid_at'] = $paid_at;

        return $this;
    }

    /**
     * Gets pdf_pages
     *
     * @return int
     */
    public function getPdfPages()
    {
        return $this->container['pdf_pages'];
    }

    /**
     * Sets pdf_pages
     *
     * @param int $pdf_pages pdf_pages
     *
     * @return $this
     */
    public function setPdfPages($pdf_pages)
    {
        $this->container['pdf_pages'] = $pdf_pages;

        return $this;
    }

    /**
     * Gets pdf_template
     *
     * @return string
     */
    public function getPdfTemplate()
    {
        return $this->container['pdf_template'];
    }

    /**
     * Sets pdf_template
     *
     * @param string $pdf_template Default template is null or 'DE', default english is 'EN' and for all others use the numeric template ID.
     *
     * @return $this
     */
    public function setPdfTemplate($pdf_template)
    {
        $this->container['pdf_template'] = $pdf_template;

        return $this;
    }

    /**
     * Gets project_id
     *
     * @return int
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     *
     * @param int $project_id project_id
     *
     * @return $this
     */
    public function setProjectId($project_id)
    {
        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets recurring_options
     *
     * @return \Swagger\Client\Model\DocumentRecurring
     */
    public function getRecurringOptions()
    {
        return $this->container['recurring_options'];
    }

    /**
     * Sets recurring_options
     *
     * @param \Swagger\Client\Model\DocumentRecurring $recurring_options recurring_options
     *
     * @return $this
     */
    public function setRecurringOptions($recurring_options)
    {
        $this->container['recurring_options'] = $recurring_options;

        return $this;
    }

    /**
     * Gets ref_id
     *
     * @return int
     */
    public function getRefId()
    {
        return $this->container['ref_id'];
    }

    /**
     * Sets ref_id
     *
     * @param int $ref_id Reference document id
     *
     * @return $this
     */
    public function setRefId($ref_id)
    {
        $this->container['ref_id'] = $ref_id;

        return $this;
    }

    /**
     * Gets service_date
     *
     * @return \Swagger\Client\Model\ServiceDate
     */
    public function getServiceDate()
    {
        return $this->container['service_date'];
    }

    /**
     * Sets service_date
     *
     * @param \Swagger\Client\Model\ServiceDate $service_date service_date
     *
     * @return $this
     */
    public function setServiceDate($service_date)
    {
        $this->container['service_date'] = $service_date;

        return $this;
    }

    /**
     * Gets shipping_country
     *
     * @return string
     */
    public function getShippingCountry()
    {
        return $this->container['shipping_country'];
    }

    /**
     * Sets shipping_country
     *
     * @param string $shipping_country shipping_country
     *
     * @return $this
     */
    public function setShippingCountry($shipping_country)
    {
        $this->container['shipping_country'] = $shipping_country;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status This value can only be used in document type DELIVERY, ORDER, CHARGE or OFFER. NULL is default = not set.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string $text text
     *
     * @return $this
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets text_prefix
     *
     * @return string
     */
    public function getTextPrefix()
    {
        return $this->container['text_prefix'];
    }

    /**
     * Sets text_prefix
     *
     * @param string $text_prefix text_prefix
     *
     * @return $this
     */
    public function setTextPrefix($text_prefix)
    {
        $this->container['text_prefix'] = $text_prefix;

        return $this;
    }

    /**
     * Gets text_tax
     *
     * @return string
     */
    public function getTextTax()
    {
        return $this->container['text_tax'];
    }

    /**
     * Sets text_tax
     *
     * @param string $text_tax Overwrites the default vat-option text from the document layout. It is only displayed in documents with the type other than: Delivery, Dunning, Reminder or Letter and a different vat-option than null
     *
     * @return $this
     */
    public function setTextTax($text_tax)
    {
        $this->container['text_tax'] = $text_tax;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Can only set on create.
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets use_shipping_address
     *
     * @return bool
     */
    public function getUseShippingAddress()
    {
        return $this->container['use_shipping_address'];
    }

    /**
     * Sets use_shipping_address
     *
     * @param bool $use_shipping_address If true and customer has shipping address then it will be used.
     *
     * @return $this
     */
    public function setUseShippingAddress($use_shipping_address)
    {
        $this->container['use_shipping_address'] = $use_shipping_address;

        return $this;
    }

    /**
     * Gets vat_country
     *
     * @return string
     */
    public function getVatCountry()
    {
        return $this->container['vat_country'];
    }

    /**
     * Sets vat_country
     *
     * @param string $vat_country vat_country
     *
     * @return $this
     */
    public function setVatCountry($vat_country)
    {
        $this->container['vat_country'] = $vat_country;

        return $this;
    }

    /**
     * Gets vat_id
     *
     * @return string
     */
    public function getVatId()
    {
        return $this->container['vat_id'];
    }

    /**
     * Sets vat_id
     *
     * @param string $vat_id vat_id
     *
     * @return $this
     */
    public function setVatId($vat_id)
    {
        $this->container['vat_id'] = $vat_id;

        return $this;
    }

    /**
     * Gets fulfillment_country
     *
     * @return string
     */
    public function getFulfillmentCountry()
    {
        return $this->container['fulfillment_country'];
    }

    /**
     * Sets fulfillment_country
     *
     * @param string $fulfillment_country fulfillment_country
     *
     * @return $this
     */
    public function setFulfillmentCountry($fulfillment_country)
    {
        $this->container['fulfillment_country'] = $fulfillment_country;

        return $this;
    }

    /**
     * Gets vat_option
     *
     * @return string
     */
    public function getVatOption()
    {
        return $this->container['vat_option'];
    }

    /**
     * Sets vat_option
     *
     * @param string $vat_option NULL: Normal steuerbar<br/> nStb: Nicht steuerbar (Drittland)<br/> nStbUstID: Nicht steuerbar (EU mit USt-IdNr.)<br/> nStbNoneUstID: Nicht steuerbar (EU ohne USt-IdNr.)<br/> nStbIm: Nicht steuerbarer Innenumsatz<br/> revc: Steuerschuldwechsel §13b (Inland)<br/> IG: Innergemeinschaftliche Lieferung<br/> AL: Ausfuhrlieferung<br/> sStfr: sonstige Steuerbefreiung<br/> smallBusiness: Kleinunternehmen (Keine MwSt.)
     *
     * @return $this
     */
    public function setVatOption($vat_option)
    {
        $allowedValues = $this->getVatOptionAllowableValues();
        if (!is_null($vat_option) && !in_array($vat_option, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'vat_option', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['vat_option'] = $vat_option;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
