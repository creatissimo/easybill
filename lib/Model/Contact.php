<?php
/**
 * Contact
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * easybill REST API
 *
 * The first version of the easybill REST API. [CHANGELOG](https://api.easybill.de/rest/v1/CHANGELOG.md)  ## Authentication  You can choose between two available methods: `Basic Auth` or `Bearer Token`.  In each HTTP request, one of the following HTTP headers is required:  ``` # Basic Auth Authorization: Basic base64_encode('<email>:<api_key>') # Bearer Token Authorization: Bearer <api_key> ```  ## Limitations  ### Request Limit  * PLUS: 10 requests per minute * BUSINESS: 60 requests per minute  If the limit is exceeded, you will receive the HTTP error: `429 Too Many Requests`  ### Result Limit  All result lists are limited to 100 by default. This limit can be increased by the query parameter `limit` to a maximum of 1000.  ## Query filter  Many list resources can be filtered. In `/documents` you can filter e.g. by number with `/documents?number=111028654`. If you want to filter multiple numbers, you can either enter them separated by commas `/documents?number=111028654,222006895` or as an array `/documents?number[]=111028654&number[]=222006895`.  **Warning**: The maximum size of an HTTP request line in bytes is 4094. If this limit is exceeded, you will receive the HTTP error: `414 Request-URI Too Large`  ### Escape commas in query  You can escape commans in query `name=Patrick\\, Peter` if you submit the header `X-Easybill-Escape: true` in your request.  ## Property login_id  This is the login of your admin or employee account.  ## Date and Date-Time format Please use the timezone `Europe/Berlin`. * **date** = *Y-m-d* = `2016-12-31` * **date-time** = *Y-m-d H:i:s* = `2016-12-31 03:13:37`  Date or datetime can be `null` because the attributes have been added later and the entry is older.
 *
 * OpenAPI spec version: 1.70.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.33
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Contact Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Contact implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Contact';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'city' => 'string',
'state' => 'string',
'company_name' => 'string',
'country' => 'string',
'department' => 'string',
'emails' => 'string[]',
'fax' => 'string',
'first_name' => 'string',
'id' => 'int',
'last_name' => 'string',
'login_id' => 'int',
'mobile' => 'string',
'note' => 'string',
'personal' => 'bool',
'phone_1' => 'string',
'phone_2' => 'string',
'salutation' => 'int',
'street' => 'string',
'suffix_1' => 'string',
'suffix_2' => 'string',
'title' => 'string',
'zip_code' => 'string',
'created_at' => 'string',
'updated_at' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'city' => null,
'state' => null,
'company_name' => null,
'country' => null,
'department' => null,
'emails' => null,
'fax' => null,
'first_name' => null,
'id' => 'int64',
'last_name' => null,
'login_id' => 'int64',
'mobile' => null,
'note' => null,
'personal' => null,
'phone_1' => null,
'phone_2' => null,
'salutation' => null,
'street' => null,
'suffix_1' => null,
'suffix_2' => null,
'title' => null,
'zip_code' => null,
'created_at' => 'datetime',
'updated_at' => 'datetime'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'city' => 'city',
'state' => 'state',
'company_name' => 'company_name',
'country' => 'country',
'department' => 'department',
'emails' => 'emails',
'fax' => 'fax',
'first_name' => 'first_name',
'id' => 'id',
'last_name' => 'last_name',
'login_id' => 'login_id',
'mobile' => 'mobile',
'note' => 'note',
'personal' => 'personal',
'phone_1' => 'phone_1',
'phone_2' => 'phone_2',
'salutation' => 'salutation',
'street' => 'street',
'suffix_1' => 'suffix_1',
'suffix_2' => 'suffix_2',
'title' => 'title',
'zip_code' => 'zip_code',
'created_at' => 'created_at',
'updated_at' => 'updated_at'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'city' => 'setCity',
'state' => 'setState',
'company_name' => 'setCompanyName',
'country' => 'setCountry',
'department' => 'setDepartment',
'emails' => 'setEmails',
'fax' => 'setFax',
'first_name' => 'setFirstName',
'id' => 'setId',
'last_name' => 'setLastName',
'login_id' => 'setLoginId',
'mobile' => 'setMobile',
'note' => 'setNote',
'personal' => 'setPersonal',
'phone_1' => 'setPhone1',
'phone_2' => 'setPhone2',
'salutation' => 'setSalutation',
'street' => 'setStreet',
'suffix_1' => 'setSuffix1',
'suffix_2' => 'setSuffix2',
'title' => 'setTitle',
'zip_code' => 'setZipCode',
'created_at' => 'setCreatedAt',
'updated_at' => 'setUpdatedAt'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'city' => 'getCity',
'state' => 'getState',
'company_name' => 'getCompanyName',
'country' => 'getCountry',
'department' => 'getDepartment',
'emails' => 'getEmails',
'fax' => 'getFax',
'first_name' => 'getFirstName',
'id' => 'getId',
'last_name' => 'getLastName',
'login_id' => 'getLoginId',
'mobile' => 'getMobile',
'note' => 'getNote',
'personal' => 'getPersonal',
'phone_1' => 'getPhone1',
'phone_2' => 'getPhone2',
'salutation' => 'getSalutation',
'street' => 'getStreet',
'suffix_1' => 'getSuffix1',
'suffix_2' => 'getSuffix2',
'title' => 'getTitle',
'zip_code' => 'getZipCode',
'created_at' => 'getCreatedAt',
'updated_at' => 'getUpdatedAt'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['company_name'] = isset($data['company_name']) ? $data['company_name'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['department'] = isset($data['department']) ? $data['department'] : 'null';
        $this->container['emails'] = isset($data['emails']) ? $data['emails'] : null;
        $this->container['fax'] = isset($data['fax']) ? $data['fax'] : 'null';
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : 'null';
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : 'null';
        $this->container['login_id'] = isset($data['login_id']) ? $data['login_id'] : null;
        $this->container['mobile'] = isset($data['mobile']) ? $data['mobile'] : 'null';
        $this->container['note'] = isset($data['note']) ? $data['note'] : 'null';
        $this->container['personal'] = isset($data['personal']) ? $data['personal'] : false;
        $this->container['phone_1'] = isset($data['phone_1']) ? $data['phone_1'] : 'null';
        $this->container['phone_2'] = isset($data['phone_2']) ? $data['phone_2'] : 'null';
        $this->container['salutation'] = isset($data['salutation']) ? $data['salutation'] : null;
        $this->container['street'] = isset($data['street']) ? $data['street'] : null;
        $this->container['suffix_1'] = isset($data['suffix_1']) ? $data['suffix_1'] : 'null';
        $this->container['suffix_2'] = isset($data['suffix_2']) ? $data['suffix_2'] : 'null';
        $this->container['title'] = isset($data['title']) ? $data['title'] : 'null';
        $this->container['zip_code'] = isset($data['zip_code']) ? $data['zip_code'] : 'null';
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['city'] === null) {
            $invalidProperties[] = "'city' can't be null";
        }
        if ($this->container['street'] === null) {
            $invalidProperties[] = "'street' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city city
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string $company_name company_name
     *
     * @return $this
     */
    public function setCompanyName($company_name)
    {
        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country Two-letter country code
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets department
     *
     * @return string
     */
    public function getDepartment()
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param string $department department
     *
     * @return $this
     */
    public function setDepartment($department)
    {
        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets emails
     *
     * @return string[]
     */
    public function getEmails()
    {
        return $this->container['emails'];
    }

    /**
     * Sets emails
     *
     * @param string[] $emails emails
     *
     * @return $this
     */
    public function setEmails($emails)
    {
        $this->container['emails'] = $emails;

        return $this;
    }

    /**
     * Gets fax
     *
     * @return string
     */
    public function getFax()
    {
        return $this->container['fax'];
    }

    /**
     * Sets fax
     *
     * @param string $fax fax
     *
     * @return $this
     */
    public function setFax($fax)
    {
        $this->container['fax'] = $fax;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name first_name
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name last_name
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets login_id
     *
     * @return int
     */
    public function getLoginId()
    {
        return $this->container['login_id'];
    }

    /**
     * Sets login_id
     *
     * @param int $login_id login_id
     *
     * @return $this
     */
    public function setLoginId($login_id)
    {
        $this->container['login_id'] = $login_id;

        return $this;
    }

    /**
     * Gets mobile
     *
     * @return string
     */
    public function getMobile()
    {
        return $this->container['mobile'];
    }

    /**
     * Sets mobile
     *
     * @param string $mobile mobile
     *
     * @return $this
     */
    public function setMobile($mobile)
    {
        $this->container['mobile'] = $mobile;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note note
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets personal
     *
     * @return bool
     */
    public function getPersonal()
    {
        return $this->container['personal'];
    }

    /**
     * Sets personal
     *
     * @param bool $personal personal
     *
     * @return $this
     */
    public function setPersonal($personal)
    {
        $this->container['personal'] = $personal;

        return $this;
    }

    /**
     * Gets phone_1
     *
     * @return string
     */
    public function getPhone1()
    {
        return $this->container['phone_1'];
    }

    /**
     * Sets phone_1
     *
     * @param string $phone_1 phone_1
     *
     * @return $this
     */
    public function setPhone1($phone_1)
    {
        $this->container['phone_1'] = $phone_1;

        return $this;
    }

    /**
     * Gets phone_2
     *
     * @return string
     */
    public function getPhone2()
    {
        return $this->container['phone_2'];
    }

    /**
     * Sets phone_2
     *
     * @param string $phone_2 phone_2
     *
     * @return $this
     */
    public function setPhone2($phone_2)
    {
        $this->container['phone_2'] = $phone_2;

        return $this;
    }

    /**
     * Gets salutation
     *
     * @return int
     */
    public function getSalutation()
    {
        return $this->container['salutation'];
    }

    /**
     * Sets salutation
     *
     * @param int $salutation 0: empty<br/> 1: Herrn<br/> 2: Frau<br/> 3: Firma<br/> 4: Herrn und Frau<br/> 5: Eheleute<br/> 6: Familie
     *
     * @return $this
     */
    public function setSalutation($salutation)
    {
        $this->container['salutation'] = $salutation;

        return $this;
    }

    /**
     * Gets street
     *
     * @return string
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string $street street
     *
     * @return $this
     */
    public function setStreet($street)
    {
        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets suffix_1
     *
     * @return string
     */
    public function getSuffix1()
    {
        return $this->container['suffix_1'];
    }

    /**
     * Sets suffix_1
     *
     * @param string $suffix_1 suffix_1
     *
     * @return $this
     */
    public function setSuffix1($suffix_1)
    {
        $this->container['suffix_1'] = $suffix_1;

        return $this;
    }

    /**
     * Gets suffix_2
     *
     * @return string
     */
    public function getSuffix2()
    {
        return $this->container['suffix_2'];
    }

    /**
     * Sets suffix_2
     *
     * @param string $suffix_2 suffix_2
     *
     * @return $this
     */
    public function setSuffix2($suffix_2)
    {
        $this->container['suffix_2'] = $suffix_2;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets zip_code
     *
     * @return string
     */
    public function getZipCode()
    {
        return $this->container['zip_code'];
    }

    /**
     * Sets zip_code
     *
     * @param string $zip_code zip_code
     *
     * @return $this
     */
    public function setZipCode($zip_code)
    {
        $this->container['zip_code'] = $zip_code;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
